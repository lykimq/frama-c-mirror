[kernel] Parsing function1_v2.c (with preprocessing)
[alias] analysing global variable definiton: __fc_rand_max =
  (unsigned long)2147483647;
[alias] May-aliases after global variable definition  __fc_rand_max  are  <none>
[alias] May-alias graph after global variable definition  __fc_rand_max  is
  <empty>
[alias] analysing global variable definiton: __fc_p_random48_counter =
  __fc_random48_counter;
[alias] May-aliases after global variable definition  __fc_p_random48_counter  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after global variable definition  __fc_p_random48_counter
  is    0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing function: alias
[alias] analysing instruction: *x = *y;
[alias] May-aliases after instruction  *x = *y;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; y }  { *x; *y }
[alias] May-alias graph after instruction  *x = *y;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x } → 5:{  }   5:{  } → 6:{  }   7:{ y } → 5:{  }
[alias] May-aliases at the end of function alias:
  { __fc_random48_counter; __fc_p_random48_counter }  { x; y }  { *x; *y }
[alias] May-alias graph at the end of function alias:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x } → 5:{  }   5:{  } → 6:{  }   7:{ y } → 5:{  }
[alias] Summary of function alias:
  formals: x  y    returns: <none>
  state: { __fc_random48_counter; __fc_p_random48_counter }  { x; y }
         { *x; *y }
[alias] analysing function: main
[alias] analysing instruction: int *a = malloc(sizeof(int));
[alias] May-aliases after instruction  int *a = malloc(sizeof(int));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  int *a = malloc(sizeof(int));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a } → 11:{  }
[alias] analysing instruction: *a = 0;
[alias] May-aliases after instruction  *a = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  *a = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a } → 11:{  }
[alias] analysing instruction: int *b = malloc(sizeof(int));
[alias] May-aliases after instruction  int *b = malloc(sizeof(int));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  int *b = malloc(sizeof(int));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a } → 11:{  }   12:{ b } → 13:{  }
[alias] analysing instruction: *b = 42;
[alias] May-aliases after instruction  *b = 42;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  *b = 42;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a } → 11:{  }   12:{ b } → 13:{  }
[alias] analysing instruction: alias(& a,& b);
[alias] May-aliases after instruction  alias(& a,& b);  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a; b }
[alias] May-alias graph after instruction  alias(& a,& b);  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a; b } → 11:{  }   22:{  } → 10:{ a; b }   23:{  } → 10:{ a; b }
[alias] analysing instruction: *a = 7;
[alias] May-aliases after instruction  *a = 7;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a; b }
[alias] May-alias graph after instruction  *a = 7;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a; b } → 11:{  }   22:{  } → 10:{ a; b }   23:{  } → 10:{ a; b }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a; b }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a; b } → 11:{  }   22:{  } → 10:{ a; b }   23:{  } → 10:{ a; b }
[alias] May-aliases at the end of function main:
  { __fc_random48_counter; __fc_p_random48_counter }  { a; b }
[alias] May-alias graph at the end of function main:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  10:{ a; b } → 11:{  }   22:{  } → 10:{ a; b }   23:{  } → 10:{ a; b }
[alias] Summary of function main:
  formals:     returns: __retres
  state: { __fc_random48_counter; __fc_p_random48_counter }  { a; b }
[alias] Analysis complete
