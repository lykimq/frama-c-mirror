[kernel] Parsing example2.c (with preprocessing)
[alias] analysing global variable definiton: __fc_rand_max =
  (unsigned long)2147483647;
[alias] May-aliases after global variable definition  __fc_rand_max  are  <none>
[alias] May-alias graph after global variable definition  __fc_rand_max  is
  <empty>
[alias] analysing global variable definiton: __fc_p_random48_counter =
  __fc_random48_counter;
[alias] May-aliases after global variable definition  __fc_p_random48_counter  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after global variable definition  __fc_p_random48_counter
  is    0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing function: f1
[alias] analysing instruction: ty *tmp = x;
[alias] May-aliases after instruction  ty *tmp = x;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
[alias] May-alias graph after instruction  ty *tmp = x;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }
[alias] analysing instruction:
  idata = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
[alias] May-alias graph after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   8:{ idata } → 9:{  }
[alias] analysing instruction: int i = 0;
[alias] May-aliases after instruction  int i = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
[alias] May-alias graph after instruction  int i = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   8:{ idata } → 9:{  }
[alias] analysing instruction: idata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  idata = tmp->t2[*(tmp->n2)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
[alias] May-alias graph after instruction  idata = tmp->t2[*(tmp->n2)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   8:{ idata } → 9:{  }
  10:{  } → 8:{ idata }
[alias] analysing instruction: odata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  odata = tmp->t1[*(tmp->n1)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t1[*(tmp->n1)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: idx = 0;
[alias] May-aliases after instruction  idx = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  idx = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: tmp_1 = sin(*(idata + idx));
[alias:undefined:fn] example2.c:45: Warning: function sin has no definition
[alias] May-aliases after instruction  tmp_1 = sin(*(idata + idx));  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  tmp_1 = sin(*(idata + idx));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: *(odata + idx) = 0.5 * tmp_1;
[alias] May-aliases after instruction  *(odata + idx) = 0.5 * tmp_1;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  *(odata + idx) = 0.5 * tmp_1;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: idx ++;
[alias] May-aliases after instruction  idx ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  idx ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: swap(tmp->n1);
[alias] analysing function: swap
[alias] analysing instruction: *n = 0;
[alias] May-aliases after instruction  *n = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  *n = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing instruction: (*n) ++;
[alias] May-aliases after instruction  (*n) ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  (*n) ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] May-aliases at the end of function swap:
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph at the end of function swap:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] Summary of function swap:
  formals: n    returns: <none>
  state: { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-aliases after instruction  swap(tmp->n1);  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  swap(tmp->n1);  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: i ++;
[alias] May-aliases after instruction  i ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  i ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: idata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  idata = tmp->t2[*(tmp->n2)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  idata = tmp->t2[*(tmp->n2)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: odata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  odata = tmp->t1[*(tmp->n1)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t1[*(tmp->n1)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] analysing instruction: __retres = (void *)0;
[alias] May-aliases after instruction  __retres = (void *)0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph after instruction  __retres = (void *)0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] May-aliases at the end of function f1:
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }  { x->t1; tmp->t1 }
  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] May-alias graph at the end of function f1:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ x; tmp } → 5:{  }   5:{  } -t2→ 10:{  }   5:{  } -t1→ 14:{  }
  8:{ idata } → 9:{  }   10:{  } → 8:{ idata }   12:{ odata } → 13:{  }
  14:{  } → 12:{ odata }
[alias] Summary of function f1:
  formals: x    returns: __retres
  state: { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
         { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; idata }
         { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; odata }
[alias] analysing function: f2
[alias] analysing instruction: ty *tmp = x;
[alias] May-aliases after instruction  ty *tmp = x;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
[alias] May-alias graph after instruction  ty *tmp = x;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }
[alias] analysing instruction:
  idata = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
[alias] May-alias graph after instruction
  idata = (double *)malloc((unsigned long)10 * sizeof(double));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   24:{ idata } → 25:{  }
[alias] analysing instruction: int i = 0;
[alias] May-aliases after instruction  int i = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
[alias] May-alias graph after instruction  int i = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   24:{ idata } → 25:{  }
[alias] analysing instruction: idata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  idata = tmp->t1[*(tmp->n1)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
[alias] May-alias graph after instruction  idata = tmp->t1[*(tmp->n1)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
[alias] analysing instruction: odata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  odata = tmp->t2[*(tmp->n2)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t2[*(tmp->n2)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction: idx = 0;
[alias] May-aliases after instruction  idx = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  idx = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction:
  *(odata + idx) = (double)3 * *(idata + idx) + (double)1;
[alias] May-aliases after instruction
  *(odata + idx) = (double)3 * *(idata + idx) + (double)1;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction
  *(odata + idx) = (double)3 * *(idata + idx) + (double)1;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction: idx ++;
[alias] May-aliases after instruction  idx ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  idx ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction: swap(tmp->n2);
[alias] May-aliases after instruction  swap(tmp->n2);  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  swap(tmp->n2);  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction: i ++;
[alias] May-aliases after instruction  i ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  i ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction: idata = tmp->t1[*(tmp->n1)];
[alias] May-aliases after instruction  idata = tmp->t1[*(tmp->n1)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  idata = tmp->t1[*(tmp->n1)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction: odata = tmp->t2[*(tmp->n2)];
[alias] May-aliases after instruction  odata = tmp->t2[*(tmp->n2)];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  odata = tmp->t2[*(tmp->n2)];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] analysing instruction: __retres = (void *)0;
[alias] May-aliases after instruction  __retres = (void *)0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph after instruction  __retres = (void *)0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] May-aliases at the end of function f2:
  { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
  { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }  { x->t2; tmp->t2 }
  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] May-alias graph at the end of function f2:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  20:{ x; tmp } → 21:{  }   21:{  } -t1→ 26:{  }   21:{  } -t2→ 30:{  }
  24:{ idata } → 25:{  }   26:{  } → 24:{ idata }
  28:{ odata } → 29:{  }   30:{  } → 28:{ odata }
[alias] Summary of function f2:
  formals: x    returns: __retres
  state: { __fc_random48_counter; __fc_p_random48_counter }  { x; tmp }
         { x->t1; tmp->t1 }  { x->t1[0..]; tmp->t1[0..]; idata }
         { x->t2; tmp->t2 }  { x->t2[0..]; tmp->t2[0..]; odata }
[alias] analysing function: main
[alias] analysing instruction: a = (ty *)malloc(sizeof(ty));
[alias] May-aliases after instruction  a = (ty *)malloc(sizeof(ty));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  a = (ty *)malloc(sizeof(ty));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }
[alias] analysing instruction: b = (ty *)malloc(sizeof(ty));
[alias] May-aliases after instruction  b = (ty *)malloc(sizeof(ty));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  b = (ty *)malloc(sizeof(ty));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   38:{ b } → 39:{  }
[alias] analysing instruction: i = 0;
[alias] May-aliases after instruction  i = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  i = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   38:{ b } → 39:{  }
[alias] analysing instruction:
  a->t1[i] = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  a->t1[i] = (double *)malloc((unsigned long)10 * sizeof(double));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction
  a->t1[i] = (double *)malloc((unsigned long)10 * sizeof(double));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -t1→ 40:{  }   38:{ b } → 39:{  }
  40:{  } → 41:{  }   41:{  } → 42:{  }
[alias] analysing instruction:
  a->t2[i] = (double *)malloc((unsigned long)10 * sizeof(double));
[alias] May-aliases after instruction
  a->t2[i] = (double *)malloc((unsigned long)10 * sizeof(double));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction
  a->t2[i] = (double *)malloc((unsigned long)10 * sizeof(double));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -t1→ 40:{  }   37:{  } -t2→ 43:{  }
  38:{ b } → 39:{  }   40:{  } → 41:{  }   41:{  } → 42:{  }
  43:{  } → 44:{  }   44:{  } → 45:{  }
[alias] analysing instruction: i ++;
[alias] May-aliases after instruction  i ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  i ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -t1→ 40:{  }   37:{  } -t2→ 43:{  }
  38:{ b } → 39:{  }   40:{  } → 41:{  }   41:{  } → 42:{  }
  43:{  } → 44:{  }   44:{  } → 45:{  }
[alias] analysing instruction: a->n1 = (int *)malloc(sizeof(int));
[alias] May-aliases after instruction  a->n1 = (int *)malloc(sizeof(int));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  a->n1 = (int *)malloc(sizeof(int));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   38:{ b } → 39:{  }
  46:{  } → 47:{  }
[alias] analysing instruction: a->n2 = (int *)malloc(sizeof(int));
[alias] May-aliases after instruction  a->n2 = (int *)malloc(sizeof(int));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  a->n2 = (int *)malloc(sizeof(int));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   37:{  } -n2→ 48:{  }
  38:{ b } → 39:{  }   46:{  } → 47:{  }   48:{  } → 49:{  }
[alias] analysing instruction: *(a->n1) = 1;
[alias] May-aliases after instruction  *(a->n1) = 1;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  *(a->n1) = 1;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   37:{  } -n2→ 48:{  }
  38:{ b } → 39:{  }   46:{  } → 47:{  }   48:{  } → 49:{  }
[alias] analysing instruction: *(a->n2) = 1;
[alias] May-aliases after instruction  *(a->n2) = 1;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  *(a->n2) = 1;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   37:{  } -n2→ 48:{  }
  38:{ b } → 39:{  }   46:{  } → 47:{  }   48:{  } → 49:{  }
[alias] analysing instruction: i = 0;
[alias] May-aliases after instruction  i = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  i = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   37:{  } -n2→ 48:{  }
  38:{ b } → 39:{  }   46:{  } → 47:{  }   48:{  } → 49:{  }
[alias] analysing instruction: b->t1[i] = a->t1[i];
[alias] May-aliases after instruction  b->t1[i] = a->t1[i];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->t1; b->t1 }
[alias] May-alias graph after instruction  b->t1[i] = a->t1[i];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   37:{  } -n2→ 48:{  }
  37:{  } -t1→ 52:{  }   38:{ b } → 39:{  }   39:{  } -t1→ 50:{  }
  46:{  } → 47:{  }   48:{  } → 49:{  }   50:{  } → 51:{  }
  52:{  } → 51:{  }
[alias] analysing instruction: b->t2[i] = a->t2[i];
[alias] May-aliases after instruction  b->t2[i] = a->t2[i];  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->t1; b->t1 }
  { a->t2; b->t2 }
[alias] May-alias graph after instruction  b->t2[i] = a->t2[i];  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   37:{  } -n2→ 48:{  }
  37:{  } -t1→ 52:{  }   37:{  } -t2→ 56:{  }   38:{ b } → 39:{  }
  39:{  } -t1→ 50:{  }   39:{  } -t2→ 54:{  }   46:{  } → 47:{  }
  48:{  } → 49:{  }   50:{  } → 51:{  }   52:{  } → 51:{  }
  54:{  } → 55:{  }   56:{  } → 55:{  }
[alias] analysing instruction: i ++;
[alias] May-aliases after instruction  i ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->t1; b->t1 }
  { a->t2; b->t2 }
[alias] May-alias graph after instruction  i ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 46:{  }   37:{  } -n2→ 48:{  }
  37:{  } -t1→ 52:{  }   37:{  } -t2→ 56:{  }   38:{ b } → 39:{  }
  39:{  } -t1→ 50:{  }   39:{  } -t2→ 54:{  }   46:{  } → 47:{  }
  48:{  } → 49:{  }   50:{  } → 51:{  }   52:{  } → 51:{  }
  54:{  } → 55:{  }   56:{  } → 55:{  }
[alias] analysing instruction: b->n1 = a->n1;
[alias] May-aliases after instruction  b->n1 = a->n1;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->n1; b->n1 }
[alias] May-alias graph after instruction  b->n1 = a->n1;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n2→ 48:{  }   37:{  } -n1→ 58:{  }
  38:{ b } → 39:{  }   39:{  } -n1→ 58:{  }   48:{  } → 49:{  }
  58:{  } → 47:{  }
[alias] analysing instruction: b->n2 = a->n2;
[alias] May-aliases after instruction  b->n2 = a->n2;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->n1; b->n1 }
  { a->n2; b->n2 }
[alias] May-alias graph after instruction  b->n2 = a->n2;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 58:{  }   37:{  } -n2→ 59:{  }
  38:{ b } → 39:{  }   39:{  } -n1→ 58:{  }   39:{  } -n2→ 59:{  }
  58:{  } → 47:{  }   59:{  } → 49:{  }
[alias] analysing instruction: f1(a);
[alias] May-aliases after instruction  f1(a);  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->n1; b->n1 }
  { a->n2; b->n2 }
[alias] May-alias graph after instruction  f1(a);  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 58:{  }   37:{  } -n2→ 59:{  }
  37:{  } -t2→ 70:{  }   37:{  } -t1→ 74:{  }   38:{ b } → 39:{  }
  39:{  } -n1→ 58:{  }   39:{  } -n2→ 59:{  }   58:{  } → 47:{  }
  59:{  } → 49:{  }   68:{  } → 69:{  }   70:{  } → 68:{  }
  72:{  } → 73:{  }   74:{  } → 72:{  }
[alias] analysing instruction: f2(b);
[alias] May-aliases after instruction  f2(b);  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->n1; b->n1 }
  { a->n2; b->n2 }
[alias] May-alias graph after instruction  f2(b);  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 58:{  }   37:{  } -n2→ 59:{  }
  37:{  } -t2→ 70:{  }   37:{  } -t1→ 74:{  }   38:{ b } → 39:{  }
  39:{  } -n1→ 58:{  }   39:{  } -n2→ 59:{  }   39:{  } -t1→ 106:{  }
  39:{  } -t2→ 110:{  }   58:{  } → 47:{  }   59:{  } → 49:{  }
  68:{  } → 69:{  }   70:{  } → 68:{  }   72:{  } → 73:{  }
  74:{  } → 72:{  }   104:{  } → 105:{  }   106:{  } → 104:{  }
  108:{  } → 109:{  }   110:{  } → 108:{  }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { a->n1; b->n1 }
  { a->n2; b->n2 }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 58:{  }   37:{  } -n2→ 59:{  }
  37:{  } -t2→ 70:{  }   37:{  } -t1→ 74:{  }   38:{ b } → 39:{  }
  39:{  } -n1→ 58:{  }   39:{  } -n2→ 59:{  }   39:{  } -t1→ 106:{  }
  39:{  } -t2→ 110:{  }   58:{  } → 47:{  }   59:{  } → 49:{  }
  68:{  } → 69:{  }   70:{  } → 68:{  }   72:{  } → 73:{  }
  74:{  } → 72:{  }   104:{  } → 105:{  }   106:{  } → 104:{  }
  108:{  } → 109:{  }   110:{  } → 108:{  }
[alias] May-aliases at the end of function main:
  { __fc_random48_counter; __fc_p_random48_counter }  { a->n1; b->n1 }
  { a->n2; b->n2 }
[alias] May-alias graph at the end of function main:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  36:{ a } → 37:{  }   37:{  } -n1→ 58:{  }   37:{  } -n2→ 59:{  }
  37:{  } -t2→ 70:{  }   37:{  } -t1→ 74:{  }   38:{ b } → 39:{  }
  39:{  } -n1→ 58:{  }   39:{  } -n2→ 59:{  }   39:{  } -t1→ 106:{  }
  39:{  } -t2→ 110:{  }   58:{  } → 47:{  }   59:{  } → 49:{  }
  68:{  } → 69:{  }   70:{  } → 68:{  }   72:{  } → 73:{  }
  74:{  } → 72:{  }   104:{  } → 105:{  }   106:{  } → 104:{  }
  108:{  } → 109:{  }   110:{  } → 108:{  }
[alias] Summary of function main:
  formals:     returns: __retres
  state: { __fc_random48_counter; __fc_p_random48_counter }  { a->n1; b->n1 }
         { a->n2; b->n2 }
[alias] analysing function: swap
[alias] May-aliases at the end of function swap:
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph at the end of function swap:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] Summary of function swap:
  formals: n    returns: <none>
  state: { __fc_random48_counter; __fc_p_random48_counter }
[alias] Analysis complete
