[kernel] Parsing while_for1.c (with preprocessing)
[alias] analysing global variable definiton: __fc_rand_max =
  (unsigned long)2147483647;
[alias] May-aliases after global variable definition  __fc_rand_max  are  <none>
[alias] May-alias graph after global variable definition  __fc_rand_max  is
  <empty>
[alias] analysing global variable definiton: __fc_p_random48_counter =
  __fc_random48_counter;
[alias] May-aliases after global variable definition  __fc_p_random48_counter  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after global variable definition  __fc_p_random48_counter
  is    0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing function: main
[alias] analysing instruction: int *s = (int *)0;
[alias] May-aliases after instruction  int *s = (int *)0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  int *s = (int *)0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing instruction: int idx = 0;
[alias] May-aliases after instruction  int idx = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  int idx = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing instruction: s = (int *)malloc((size_t)idx);
[alias] May-aliases after instruction  s = (int *)malloc((size_t)idx);  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  s = (int *)malloc((size_t)idx);  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ s } → 5:{  }
[alias] analysing instruction: idx ++;
[alias] May-aliases after instruction  idx ++;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  idx ++;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ s } → 5:{  }
[alias] analysing instruction: s = (int *)malloc((size_t)idx);
[alias] May-aliases after instruction  s = (int *)malloc((size_t)idx);  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  s = (int *)malloc((size_t)idx);  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ s } → 5:{  }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ s } → 5:{  }
[alias] May-aliases at the end of function main:
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph at the end of function main:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ s } → 5:{  }
[alias] Summary of function main:
  formals:     returns: __retres
  state: { __fc_random48_counter; __fc_p_random48_counter }
[alias] Analysis complete
