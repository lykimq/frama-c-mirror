[kernel] Parsing assignment4.c (with preprocessing)
[alias] analysing function: main
[alias] analysing instruction: int **a = (int **)0;
[alias] May-aliases after instruction  int **a = (int **)0;  are  <none>
[alias] May-alias graph after instruction  int **a = (int **)0;  is    <empty>
[alias] analysing instruction: int *b = (int *)0;
[alias] May-aliases after instruction  int *b = (int *)0;  are  <none>
[alias] May-alias graph after instruction  int *b = (int *)0;  is    <empty>
[alias] analysing instruction: int **c = (int **)0;
[alias] May-aliases after instruction  int **c = (int **)0;  are  <none>
[alias] May-alias graph after instruction  int **c = (int **)0;  is    <empty>
[alias] analysing instruction: int *d = (int *)0;
[alias] May-aliases after instruction  int *d = (int *)0;  are  <none>
[alias] May-alias graph after instruction  int *d = (int *)0;  is    <empty>
[alias] analysing instruction: *a = b;
[alias] May-aliases after instruction  *a = b;  are  { *a; b }
[alias] May-alias graph after instruction  *a = b;  is
  0:{ a } → 1:{ b }   1:{ b } → 2:{  }
[alias] analysing instruction: *c = d;
[alias] May-aliases after instruction  *c = d;  are  { *a; b }  { *c; d }
[alias] May-alias graph after instruction  *c = d;  is
  0:{ a } → 1:{ b }   1:{ b } → 2:{  }   5:{ c } → 6:{ d }
  6:{ d } → 7:{  }
[alias] analysing instruction: b = d;
[alias] May-aliases after instruction  b = d;  are  { a; c }  { *a; *c; b; d }
[alias] May-alias graph after instruction  b = d;  is
  0:{ a } → 1:{ b; d }   1:{ b; d } → 2:{  }   5:{ c } → 1:{ b; d }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are  { a; c }  { *a; *c; b; d }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ a } → 1:{ b; d }   1:{ b; d } → 2:{  }   5:{ c } → 1:{ b; d }
[alias] May-aliases at the end of function main: { a; c }  { *a; *c; b; d }
[alias] May-alias graph at the end of function main:
  0:{ a } → 1:{ b; d }   1:{ b; d } → 2:{  }   5:{ c } → 1:{ b; d }
[alias] Summary of function main:
  formals:     returns: __retres    state: { a; c }  { *a; *c; b; d }
[alias] Analysis complete
