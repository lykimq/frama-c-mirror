[kernel] Parsing ex_jfla_3.c (with preprocessing)
[alias] analysing global variable definiton: __fc_p_fopen = __fc_fopen;
[alias] May-aliases after global variable definition  __fc_p_fopen  are
  { __fc_fopen; __fc_p_fopen }
[alias] May-alias graph after global variable definition  __fc_p_fopen  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
[alias] analysing global variable definiton: __fc_p_tmpnam = __fc_tmpnam;
[alias] May-aliases after global variable definition  __fc_p_tmpnam  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
[alias] May-alias graph after global variable definition  __fc_p_tmpnam  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }
[alias] analysing function: jfla
[alias] analysing instruction: *snd = *fst;
[alias] May-aliases after instruction  *snd = *fst;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
[alias] May-alias graph after instruction  *snd = *fst;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }
[alias] analysing instruction: fst = *i1;
[alias] May-aliases after instruction  fst = *i1;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { *i1; fst }
[alias] May-alias graph after instruction  fst = *i1;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   8:{ fst } → 9:{  }
  10:{ i1 } → 8:{ fst }
[alias] analysing instruction: __retres = *i2;
[alias] May-aliases after instruction  __retres = *i2;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { *i1; fst }
  { *i2; __retres }
[alias] May-alias graph after instruction  __retres = *i2;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   8:{ fst } → 9:{  }
  10:{ i1 } → 8:{ fst }   13:{ __retres } → 14:{  }
  15:{ i2 } → 13:{ __retres }
[alias] analysing instruction: fst = *i2;
[alias] May-aliases after instruction  fst = *i2;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { *i2; fst }
[alias] May-alias graph after instruction  fst = *i2;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   18:{ fst } → 19:{  }
  20:{ i2 } → 18:{ fst }
[alias] analysing instruction: __retres = *i1;
[alias] May-aliases after instruction  __retres = *i1;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { *i2; fst }
  { *i1; __retres }
[alias] May-alias graph after instruction  __retres = *i1;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   18:{ fst } → 19:{  }
  20:{ i2 } → 18:{ fst }   23:{ __retres } → 24:{  }
  25:{ i1 } → 23:{ __retres }
[alias] May-aliases at the end of function jfla:
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { i1; i2 }
  { *i1; *i2; fst; __retres }
[alias] May-alias graph at the end of function jfla:
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }
  8:{ fst; __retres } → 9:{  }   10:{ i1 } → 8:{ fst; __retres }
  15:{ i2 } → 8:{ fst; __retres }
[alias] Summary of function jfla:
  formals: fst  snd  i1→{ fst; __retres }  i2→{ fst; __retres }  bo
  returns: __retres
  state: { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
         { i1; i2 }  { *i1; *i2; fst; __retres }
[alias] analysing function: main
[alias] analysing instruction: int u = 11;
[alias] May-aliases after instruction  int u = 11;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
[alias] May-alias graph after instruction  int u = 11;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }
[alias] analysing instruction: int v = 12;
[alias] May-aliases after instruction  int v = 12;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
[alias] May-alias graph after instruction  int v = 12;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }
[alias] analysing instruction: int t[3] = {0, 1, 2};
[alias] May-aliases after instruction  int t[3] = {0, 1, 2};  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
[alias] May-alias graph after instruction  int t[3] = {0, 1, 2};  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }
[alias] analysing instruction: int *a = & t[1];
[alias] May-aliases after instruction  int *a = & t[1];  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { t; a }
[alias] May-alias graph after instruction  int *a = & t[1];  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   28:{ a } → 29:{  }
  30:{ t } → 29:{  }
[alias] analysing instruction: int *b = & u;
[alias] May-aliases after instruction  int *b = & u;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { t; a }
[alias] May-alias graph after instruction  int *b = & u;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   28:{ a } → 29:{  }
  30:{ t } → 29:{  }   33:{ b } → 34:{ u }
[alias] analysing instruction: int *c = & v;
[alias] May-aliases after instruction  int *c = & v;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { t; a }
[alias] May-alias graph after instruction  int *c = & v;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   28:{ a } → 29:{  }
  30:{ t } → 29:{  }   33:{ b } → 34:{ u }   37:{ c } → 38:{ v }
[alias] analysing instruction: int **x = & a;
[alias] May-aliases after instruction  int **x = & a;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { *x; t; a }
[alias] May-alias graph after instruction  int **x = & a;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   30:{ t } → 43:{  }
  33:{ b } → 34:{ u }   37:{ c } → 38:{ v }   41:{ x } → 42:{ a }
  42:{ a } → 43:{  }
[alias] analysing instruction: int **y = & b;
[alias] May-aliases after instruction  int **y = & b;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { *x; t; a }
  { *y; b }
[alias] May-alias graph after instruction  int **y = & b;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   30:{ t } → 43:{  }
  37:{ c } → 38:{ v }   41:{ x } → 42:{ a }   42:{ a } → 43:{  }
  45:{ y } → 46:{ b }   46:{ b } → 47:{ u }
[alias] analysing instruction: int **z = & c;
[alias] May-aliases after instruction  int **z = & c;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { *x; t; a }
  { *y; b }  { *z; c }
[alias] May-alias graph after instruction  int **z = & c;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   30:{ t } → 43:{  }
  41:{ x } → 42:{ a }   42:{ a } → 43:{  }   45:{ y } → 46:{ b }
  46:{ b } → 47:{ u }   49:{ z } → 50:{ c }   50:{ c } → 51:{ v }
[alias] analysing instruction: struct str_t s = {.fst = c, .snd = t};
[alias] May-aliases after instruction  struct str_t s = {.fst = c, .snd = t};  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
  { *x; t; a; s.snd }  { *y; b }  { *z; c; s.fst }
[alias] May-alias graph after instruction  struct str_t s = {.fst = c, .snd = t};
  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a }
  42:{ a } → 43:{  }   45:{ y } → 46:{ b }   46:{ b } → 47:{ u }
  49:{ z } → 54:{ c }   53:{ s } -fst→ 54:{ c }
  53:{ s } -snd→ 55:{ t }   54:{ c } → 51:{ v }   55:{ t } → 43:{  }
[alias] analysing instruction: struct str_t *s1 = & s;
[alias] May-aliases after instruction  struct str_t *s1 = & s;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
  { *x; s1->snd; t; a; s.snd }  { *y; b }  { *z; s1->fst; c; s.fst }
[alias] May-alias graph after instruction  struct str_t *s1 = & s;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a }
  42:{ a } → 43:{  }   45:{ y } → 46:{ b }   46:{ b } → 47:{ u }
  49:{ z } → 54:{ c }   54:{ c } → 51:{ v }   55:{ t } → 43:{  }
  56:{ s1 } → 57:{ s }   57:{ s } -fst→ 54:{ c }
  57:{ s } -snd→ 55:{ t }
[alias] analysing instruction: struct str_t *s2 = & s;
[alias] May-aliases after instruction  struct str_t *s2 = & s;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
  { *x; s1->snd; s2->snd; t; a; s.snd }  { *y; b }
  { *z; s1->fst; s2->fst; c; s.fst }  { s1; s2 }
[alias] May-alias graph after instruction  struct str_t *s2 = & s;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a }
  42:{ a } → 43:{  }   45:{ y } → 46:{ b }   46:{ b } → 47:{ u }
  49:{ z } → 54:{ c }   54:{ c } → 51:{ v }   55:{ t } → 43:{  }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }   60:{ s } -fst→ 54:{ c }
  60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: printf("a=%d\n",*(s1->fst));
[alias:undefined:fn] ex_jfla_3.c:32: Warning: function printf has no definition
[alias] May-aliases after instruction  printf("a=%d\n",*(s1->fst));  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
  { *x; s1->snd; s2->snd; t; a; s.snd }  { *y; b }
  { *z; s1->fst; s2->fst; c; s.fst }  { s1; s2 }
[alias] May-alias graph after instruction  printf("a=%d\n",*(s1->fst));  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a }
  42:{ a } → 43:{  }   45:{ y } → 46:{ b }   46:{ b } → 47:{ u }
  49:{ z } → 54:{ c }   54:{ c } → 51:{ v }   55:{ t } → 43:{  }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }   60:{ s } -fst→ 54:{ c }
  60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: printf("b=%d\n",*(s1->snd));
[alias:undefined:fn] ex_jfla_3.c:33: Warning: function printf has no definition
[alias] May-aliases after instruction  printf("b=%d\n",*(s1->snd));  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
  { *x; s1->snd; s2->snd; t; a; s.snd }  { *y; b }
  { *z; s1->fst; s2->fst; c; s.fst }  { s1; s2 }
[alias] May-alias graph after instruction  printf("b=%d\n",*(s1->snd));  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a }
  42:{ a } → 43:{  }   45:{ y } → 46:{ b }   46:{ b } → 47:{ u }
  49:{ z } → 54:{ c }   54:{ c } → 51:{ v }   55:{ t } → 43:{  }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }   60:{ s } -fst→ 54:{ c }
  60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: c = jfla(s1->fst,s1->snd,x,y,0);
[alias] May-aliases after instruction  c = jfla(s1->fst,s1->snd,x,y,0);  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  c = jfla(s1->fst,s1->snd,x,y,0);  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b }
  42:{ a; b } → 43:{ u; v }   45:{ y } → 42:{ a; b }
  49:{ z } → 54:{ c }   54:{ c } → 43:{ u; v }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }   60:{ s } -fst→ 54:{ c }
  60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: printf("a=%d\n",*(s1->fst));
[alias:undefined:fn] ex_jfla_3.c:35: Warning: function printf has no definition
[alias] May-aliases after instruction  printf("a=%d\n",*(s1->fst));  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  printf("a=%d\n",*(s1->fst));  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b }
  42:{ a; b } → 43:{ u; v }   45:{ y } → 42:{ a; b }
  49:{ z } → 54:{ c }   54:{ c } → 43:{ u; v }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }   60:{ s } -fst→ 54:{ c }
  60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: printf("b=%d\n",*(s1->snd));
[alias:undefined:fn] ex_jfla_3.c:36: Warning: function printf has no definition
[alias] May-aliases after instruction  printf("b=%d\n",*(s1->snd));  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  printf("b=%d\n",*(s1->snd));  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b }
  42:{ a; b } → 43:{ u; v }   45:{ y } → 42:{ a; b }
  49:{ z } → 54:{ c }   54:{ c } → 43:{ u; v }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }   60:{ s } -fst→ 54:{ c }
  60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: a = jfla(s2->fst,s2->snd,y,z,1);
[alias] May-aliases after instruction  a = jfla(s2->fst,s2->snd,y,z,1);  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y; z }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  a = jfla(s2->fst,s2->snd,y,z,1);  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b; c }
  42:{ a; b; c } → 43:{ u; v }   45:{ y } → 42:{ a; b; c }
  49:{ z } → 42:{ a; b; c }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }
  60:{ s } -fst→ 42:{ a; b; c }   60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: printf("a=%d\n",*(s1->fst));
[alias:undefined:fn] ex_jfla_3.c:38: Warning: function printf has no definition
[alias] May-aliases after instruction  printf("a=%d\n",*(s1->fst));  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y; z }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  printf("a=%d\n",*(s1->fst));  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b; c }
  42:{ a; b; c } → 43:{ u; v }   45:{ y } → 42:{ a; b; c }
  49:{ z } → 42:{ a; b; c }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }
  60:{ s } -fst→ 42:{ a; b; c }   60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: printf("b=%d\n",*(s1->snd));
[alias:undefined:fn] ex_jfla_3.c:39: Warning: function printf has no definition
[alias] May-aliases after instruction  printf("b=%d\n",*(s1->snd));  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y; z }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  printf("b=%d\n",*(s1->snd));  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b; c }
  42:{ a; b; c } → 43:{ u; v }   45:{ y } → 42:{ a; b; c }
  49:{ z } → 42:{ a; b; c }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }
  60:{ s } -fst→ 42:{ a; b; c }   60:{ s } -snd→ 55:{ t }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y; z }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b; c }
  42:{ a; b; c } → 43:{ u; v }   45:{ y } → 42:{ a; b; c }
  49:{ z } → 42:{ a; b; c }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }
  60:{ s } -fst→ 42:{ a; b; c }   60:{ s } -snd→ 55:{ t }
[alias] May-aliases at the end of function main:
  { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }  { x; y; z }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph at the end of function main:
  0:{ __fc_fopen; __fc_p_fopen } → 1:{  }
  4:{ __fc_tmpnam; __fc_p_tmpnam } → 5:{  }   41:{ x } → 42:{ a; b; c }
  42:{ a; b; c } → 43:{ u; v }   45:{ y } → 42:{ a; b; c }
  49:{ z } → 42:{ a; b; c }   55:{ t } → 43:{ u; v }
  56:{ s1 } → 60:{ s }   59:{ s2 } → 60:{ s }
  60:{ s } -fst→ 42:{ a; b; c }   60:{ s } -snd→ 55:{ t }
[alias] Summary of function main:
  formals:     returns: __retres
  state: { __fc_fopen; __fc_p_fopen }  { __fc_tmpnam; __fc_p_tmpnam }
         { x; y; z }
         { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; 
           s.fst; s.snd }
         { s1; s2 }
[alias] Analysis complete
