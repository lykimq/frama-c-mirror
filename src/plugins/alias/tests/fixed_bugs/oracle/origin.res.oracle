[kernel] Parsing origin.c (with preprocessing)
[kernel:typing:int-conversion] origin.c:8: Warning: 
  Conversion from a pointer to an integer without an explicit cast
[alias] analysing function: f
[alias] analysing instruction: tmp = & f;
[alias] May-aliases after instruction  tmp = & f;  are  <none>
[alias] May-alias graph after instruction  tmp = & f;  is    0:{ tmp } → 1:{ f }
[alias] analysing instruction: tmp = (void (*)(void))*((char *)(v.t));
[alias:unsafe-cast] origin.c:8: Warning: 
  unsafe cast from char to void (*)(void); analysis may be unsound
[alias] May-aliases after instruction  tmp = (void (*)(void))*((char *)(v.t));  are
  { v.t[0..]; tmp }
[alias] May-alias graph after instruction  tmp = (void (*)(void))*((char *)(v.t));
  is    0:{ tmp } → 1:{ f }   4:{ v } -t→ 5:{  }   5:{  } → 0:{ tmp }
[alias] analysing instruction: int g = (int)tmp;
[alias:unsafe-cast] origin.c:8: Warning: 
  unsafe cast from void (*)(void) to int; analysis may be unsound
[alias] May-aliases after instruction  int g = (int)tmp;  are  { v.t[0..]; tmp }
[alias] May-alias graph after instruction  int g = (int)tmp;  is
  0:{ tmp } → 1:{ f }   4:{ v } -t→ 5:{  }   5:{  } → 0:{ tmp }
[alias] May-aliases at the end of function f: { v.t[0..]; tmp }
[alias] May-alias graph at the end of function f:
  0:{ tmp } → 1:{ f }   4:{ v } -t→ 5:{  }   5:{  } → 0:{ tmp }
[alias] Summary of function f:
  formals:     returns: <none>    state: { v.t[0..]; tmp }
[alias] Analysis complete
