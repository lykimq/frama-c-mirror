[kernel] Parsing array2.c (with preprocessing)
[alias] analysing function: main
[alias] analysing instruction: mat[0][0] = 0;
[alias] May-aliases after instruction  mat[0][0] = 0;  are  <none>
[alias] May-alias graph after instruction  mat[0][0] = 0;  is    <empty>
[alias] analysing instruction: mat[0][1] = 1;
[alias] May-aliases after instruction  mat[0][1] = 1;  are  <none>
[alias] May-alias graph after instruction  mat[0][1] = 1;  is    <empty>
[alias] analysing instruction: *x = mat[1];
[alias] May-aliases after instruction  *x = mat[1];  are
  { mat; x }  { *x; mat[0..] }
[alias] May-alias graph after instruction  *x = mat[1];  is
  0:{ x } → 1:{  }   1:{  } → 2:{  }   3:{ mat } → 1:{  }
[alias] analysing instruction: *y = *(*(x + 0));
[alias] May-aliases after instruction  *y = *(*(x + 0));  are
  { mat; x }  { *x; mat[0..] }
[alias] May-alias graph after instruction  *y = *(*(x + 0));  is
  0:{ x } → 1:{  }   1:{  } → 2:{  }   3:{ mat } → 1:{  }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are
  { mat; x }  { *x; mat[0..] }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ x } → 1:{  }   1:{  } → 2:{  }   3:{ mat } → 1:{  }
[alias] May-aliases at the end of function main: { mat; x }  { *x; mat[0..] }
[alias] May-alias graph at the end of function main:
  0:{ x } → 1:{  }   1:{  } → 2:{  }   3:{ mat } → 1:{  }
[alias] Summary of function main:
  formals:     returns: __retres    state: { mat; x }  { *x; mat[0..] }
[alias] Analysis complete
