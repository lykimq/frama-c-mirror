[kernel] Parsing array1.c (with preprocessing)
[alias] analysing function: main
[alias] analysing instruction: tab[0] = 0;
[alias] May-aliases after instruction  tab[0] = 0;  are  <none>
[alias] May-alias graph after instruction  tab[0] = 0;  is    <empty>
[alias] analysing instruction: tab[1] = 1;
[alias] May-aliases after instruction  tab[1] = 1;  are  <none>
[alias] May-alias graph after instruction  tab[1] = 1;  is    <empty>
[alias] analysing instruction: tab[2] = tab[1] + 1;
[alias] May-aliases after instruction  tab[2] = tab[1] + 1;  are  <none>
[alias] May-alias graph after instruction  tab[2] = tab[1] + 1;  is    <empty>
[alias] analysing instruction: int *x = & tab[1];
[alias] May-aliases after instruction  int *x = & tab[1];  are  { tab; x }
[alias] May-alias graph after instruction  int *x = & tab[1];  is
  0:{ x } → 1:{  }   2:{ tab } → 1:{  }
[alias] analysing instruction: int *y = & tab[2];
[alias] May-aliases after instruction  int *y = & tab[2];  are  { tab; x; y }
[alias] May-alias graph after instruction  int *y = & tab[2];  is
  0:{ x } → 6:{  }   2:{ tab } → 6:{  }   5:{ y } → 6:{  }
[alias] analysing instruction: tab[3] = *x + *y;
[alias] May-aliases after instruction  tab[3] = *x + *y;  are  { tab; x; y }
[alias] May-alias graph after instruction  tab[3] = *x + *y;  is
  0:{ x } → 6:{  }   2:{ tab } → 6:{  }   5:{ y } → 6:{  }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are  { tab; x; y }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ x } → 6:{  }   2:{ tab } → 6:{  }   5:{ y } → 6:{  }
[alias] May-aliases at the end of function main: { tab; x; y }
[alias] May-alias graph at the end of function main:
  0:{ x } → 6:{  }   2:{ tab } → 6:{  }   5:{ y } → 6:{  }
[alias] Summary of function main:
  formals:     returns: __retres    state: { tab; x; y }
[alias] Analysis complete
