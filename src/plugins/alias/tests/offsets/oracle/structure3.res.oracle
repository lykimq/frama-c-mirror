[kernel] Parsing structure3.c (with preprocessing)
[alias] analysing function: main
[alias] analysing instruction: st_1_t x1 = {.a = 0, .b = 1};
[alias] May-aliases after instruction  st_1_t x1 = {.a = 0, .b = 1};  are  <none>
[alias] May-alias graph after instruction  st_1_t x1 = {.a = 0, .b = 1};  is
  <empty>
[alias] analysing instruction: st_1_t x2 = {.a = 1, .b = 2};
[alias] May-aliases after instruction  st_1_t x2 = {.a = 1, .b = 2};  are  <none>
[alias] May-alias graph after instruction  st_1_t x2 = {.a = 1, .b = 2};  is
  <empty>
[alias] analysing instruction: st_2_t y1 = {.s = & x1, .c = 3};
[alias] May-aliases after instruction  st_2_t y1 = {.s = & x1, .c = 3};  are  <none>
[alias] May-alias graph after instruction  st_2_t y1 = {.s = & x1, .c = 3};  is
  0:{ y1 } -s→ 1:{  }   1:{  } → 2:{ x1 }
[alias] analysing instruction: st_2_t y2 = {.s = & x2, .c = 4};
[alias] May-aliases after instruction  st_2_t y2 = {.s = & x2, .c = 4};  are  <none>
[alias] May-alias graph after instruction  st_2_t y2 = {.s = & x2, .c = 4};  is
  0:{ y1 } -s→ 1:{  }   1:{  } → 2:{ x1 }   4:{ y2 } -s→ 5:{  }
  5:{  } → 6:{ x2 }
[alias] analysing instruction: st_3_t z = {.t = & y1, .d = 5};
[alias] May-aliases after instruction  st_3_t z = {.t = & y1, .d = 5};  are
  { (z.t)->s; y1.s }
[alias] May-alias graph after instruction  st_3_t z = {.t = & y1, .d = 5};  is
  0:{ y1 } -s→ 1:{  }   1:{  } → 2:{ x1 }   4:{ y2 } -s→ 5:{  }
  5:{  } → 6:{ x2 }   8:{ z } -t→ 9:{  }   9:{  } → 0:{ y1 }
[alias] analysing instruction: z.t = & y2;
[alias] May-aliases after instruction  z.t = & y2;  are  { (z.t)->s; y1.s; y2.s }
[alias] May-alias graph after instruction  z.t = & y2;  is
  0:{ y1; y2 } -s→ 1:{  }   1:{  } → 2:{ x1; x2 }   8:{ z } -t→ 9:{  }
  9:{  } → 0:{ y1; y2 }
[alias] analysing instruction: y1.c = z.d;
[alias] May-aliases after instruction  y1.c = z.d;  are  { (z.t)->s; y1.s; y2.s }
[alias] May-alias graph after instruction  y1.c = z.d;  is
  0:{ y1; y2 } -s→ 1:{  }   1:{  } → 2:{ x1; x2 }   8:{ z } -t→ 9:{  }
  9:{  } → 0:{ y1; y2 }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are  { (z.t)->s; y1.s; y2.s }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ y1; y2 } -s→ 1:{  }   1:{  } → 2:{ x1; x2 }   8:{ z } -t→ 9:{  }
  9:{  } → 0:{ y1; y2 }
[alias] May-aliases at the end of function main: { (z.t)->s; y1.s; y2.s }
[alias] May-alias graph at the end of function main:
  0:{ y1; y2 } -s→ 1:{  }   1:{  } → 2:{ x1; x2 }   8:{ z } -t→ 9:{  }
  9:{  } → 0:{ y1; y2 }
[alias] Summary of function main:
  formals:     returns: __retres    state: { (z.t)->s; y1.s; y2.s }
[alias] Analysis complete
