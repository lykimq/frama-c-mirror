[kernel] Parsing jfla_running_ex.c (with preprocessing)
[alias] analysing function: jfla
[alias] analysing instruction: *snd = *fst;
[alias] May-aliases after instruction  *snd = *fst;  are  <none>
[alias] May-alias graph after instruction  *snd = *fst;  is    <empty>
[alias] analysing instruction: fst = *i1;
[alias] May-aliases after instruction  fst = *i1;  are  { *i1; fst }
[alias] May-alias graph after instruction  fst = *i1;  is
  0:{ fst } → 1:{  }   2:{ i1 } → 0:{ fst }
[alias] analysing instruction: __retres = *i2;
[alias] May-aliases after instruction  __retres = *i2;  are
  { *i1; fst }  { *i2; __retres }
[alias] May-alias graph after instruction  __retres = *i2;  is
  0:{ fst } → 1:{  }   2:{ i1 } → 0:{ fst }   5:{ __retres } → 6:{  }
  7:{ i2 } → 5:{ __retres }
[alias] analysing instruction: fst = *i2;
[alias] May-aliases after instruction  fst = *i2;  are  { *i2; fst }
[alias] May-alias graph after instruction  fst = *i2;  is
  10:{ fst } → 11:{  }   12:{ i2 } → 10:{ fst }
[alias] analysing instruction: __retres = *i1;
[alias] May-aliases after instruction  __retres = *i1;  are
  { *i2; fst }  { *i1; __retres }
[alias] May-alias graph after instruction  __retres = *i1;  is
  10:{ fst } → 11:{  }   12:{ i2 } → 10:{ fst }
  15:{ __retres } → 16:{  }   17:{ i1 } → 15:{ __retres }
[alias] May-aliases at the end of function jfla:
  { i1; i2 }  { *i1; *i2; fst; __retres }
[alias] May-alias graph at the end of function jfla:
  0:{ fst; __retres } → 1:{  }   2:{ i1 } → 0:{ fst; __retres }
  7:{ i2 } → 0:{ fst; __retres }
[alias] Summary of function jfla:
  formals: fst  snd  i1→{ fst; __retres }  i2→{ fst; __retres }  bo
  returns: __retres    state: { i1; i2 }  { *i1; *i2; fst; __retres }
[alias] analysing function: main
[alias] analysing instruction: int u = 11;
[alias] May-aliases after instruction  int u = 11;  are  <none>
[alias] May-alias graph after instruction  int u = 11;  is    <empty>
[alias] analysing instruction: int v = 12;
[alias] May-aliases after instruction  int v = 12;  are  <none>
[alias] May-alias graph after instruction  int v = 12;  is    <empty>
[alias] analysing instruction: int t[3] = {0, 1, 2};
[alias] May-aliases after instruction  int t[3] = {0, 1, 2};  are  <none>
[alias] May-alias graph after instruction  int t[3] = {0, 1, 2};  is    <empty>
[alias] analysing instruction: int *a = & t[1];
[alias] May-aliases after instruction  int *a = & t[1];  are  { t; a }
[alias] May-alias graph after instruction  int *a = & t[1];  is
  20:{ a } → 21:{  }   22:{ t } → 21:{  }
[alias] analysing instruction: int *b = & u;
[alias] May-aliases after instruction  int *b = & u;  are  { t; a }
[alias] May-alias graph after instruction  int *b = & u;  is
  20:{ a } → 21:{  }   22:{ t } → 21:{  }   25:{ b } → 26:{ u }
[alias] analysing instruction: int *c = & v;
[alias] May-aliases after instruction  int *c = & v;  are  { t; a }
[alias] May-alias graph after instruction  int *c = & v;  is
  20:{ a } → 21:{  }   22:{ t } → 21:{  }   25:{ b } → 26:{ u }
  29:{ c } → 30:{ v }
[alias] analysing instruction: int **x = & a;
[alias] May-aliases after instruction  int **x = & a;  are  { *x; t; a }
[alias] May-alias graph after instruction  int **x = & a;  is
  22:{ t } → 35:{  }   25:{ b } → 26:{ u }   29:{ c } → 30:{ v }
  33:{ x } → 34:{ a }   34:{ a } → 35:{  }
[alias] analysing instruction: int **y = & b;
[alias] May-aliases after instruction  int **y = & b;  are  { *x; t; a }  { *y; b }
[alias] May-alias graph after instruction  int **y = & b;  is
  22:{ t } → 35:{  }   29:{ c } → 30:{ v }   33:{ x } → 34:{ a }
  34:{ a } → 35:{  }   37:{ y } → 38:{ b }   38:{ b } → 39:{ u }
[alias] analysing instruction: int **z = & c;
[alias] May-aliases after instruction  int **z = & c;  are
  { *x; t; a }  { *y; b }  { *z; c }
[alias] May-alias graph after instruction  int **z = & c;  is
  22:{ t } → 35:{  }   33:{ x } → 34:{ a }   34:{ a } → 35:{  }
  37:{ y } → 38:{ b }   38:{ b } → 39:{ u }   41:{ z } → 42:{ c }
  42:{ c } → 43:{ v }
[alias] analysing instruction: struct str_t s = {.fst = c, .snd = t};
[alias] May-aliases after instruction  struct str_t s = {.fst = c, .snd = t};  are
  { *x; t; a; s.snd }  { *y; b }  { *z; c; s.fst }
[alias] May-alias graph after instruction  struct str_t s = {.fst = c, .snd = t};
  is
  33:{ x } → 34:{ a }   34:{ a } → 35:{  }   37:{ y } → 38:{ b }
  38:{ b } → 39:{ u }   41:{ z } → 46:{ c }   45:{ s } -fst→ 46:{ c }
  45:{ s } -snd→ 47:{ t }   46:{ c } → 43:{ v }   47:{ t } → 35:{  }
[alias] analysing instruction: struct str_t *s1 = & s;
[alias] May-aliases after instruction  struct str_t *s1 = & s;  are
  { *x; s1->snd; t; a; s.snd }  { *y; b }  { *z; s1->fst; c; s.fst }
[alias] May-alias graph after instruction  struct str_t *s1 = & s;  is
  33:{ x } → 34:{ a }   34:{ a } → 35:{  }   37:{ y } → 38:{ b }
  38:{ b } → 39:{ u }   41:{ z } → 46:{ c }   46:{ c } → 43:{ v }
  47:{ t } → 35:{  }   48:{ s1 } → 49:{ s }   49:{ s } -fst→ 46:{ c }
  49:{ s } -snd→ 47:{ t }
[alias] analysing instruction: struct str_t *s2 = & s;
[alias] May-aliases after instruction  struct str_t *s2 = & s;  are
  { *x; s1->snd; s2->snd; t; a; s.snd }  { *y; b }
  { *z; s1->fst; s2->fst; c; s.fst }  { s1; s2 }
[alias] May-alias graph after instruction  struct str_t *s2 = & s;  is
  33:{ x } → 34:{ a }   34:{ a } → 35:{  }   37:{ y } → 38:{ b }
  38:{ b } → 39:{ u }   41:{ z } → 46:{ c }   46:{ c } → 43:{ v }
  47:{ t } → 35:{  }   48:{ s1 } → 52:{ s }   51:{ s2 } → 52:{ s }
  52:{ s } -fst→ 46:{ c }   52:{ s } -snd→ 47:{ t }
[alias] analysing instruction: c = jfla(s1->fst,s1->snd,x,y,0);
[alias] May-aliases after instruction  c = jfla(s1->fst,s1->snd,x,y,0);  are
  { x; y }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  c = jfla(s1->fst,s1->snd,x,y,0);  is
  33:{ x } → 34:{ a; b }   34:{ a; b } → 35:{ u; v }
  37:{ y } → 34:{ a; b }   41:{ z } → 46:{ c }   46:{ c } → 35:{ u; v }
  47:{ t } → 35:{ u; v }   48:{ s1 } → 52:{ s }   51:{ s2 } → 52:{ s }
  52:{ s } -fst→ 46:{ c }   52:{ s } -snd→ 47:{ t }
[alias] analysing instruction: a = jfla(s2->fst,s2->snd,y,z,1);
[alias] May-aliases after instruction  a = jfla(s2->fst,s2->snd,y,z,1);  are
  { x; y; z }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph after instruction  a = jfla(s2->fst,s2->snd,y,z,1);  is
  33:{ x } → 34:{ a; b; c }   34:{ a; b; c } → 35:{ u; v }
  37:{ y } → 34:{ a; b; c }   41:{ z } → 34:{ a; b; c }
  47:{ t } → 35:{ u; v }   48:{ s1 } → 52:{ s }   51:{ s2 } → 52:{ s }
  52:{ s } -fst→ 34:{ a; b; c }   52:{ s } -snd→ 47:{ t }
[alias] May-aliases at the end of function main:
  { x; y; z }
  { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; s.fst; s.snd }
  { s1; s2 }
[alias] May-alias graph at the end of function main:
  33:{ x } → 34:{ a; b; c }   34:{ a; b; c } → 35:{ u; v }
  37:{ y } → 34:{ a; b; c }   41:{ z } → 34:{ a; b; c }
  47:{ t } → 35:{ u; v }   48:{ s1 } → 52:{ s }   51:{ s2 } → 52:{ s }
  52:{ s } -fst→ 34:{ a; b; c }   52:{ s } -snd→ 47:{ t }
[alias] Summary of function main:
  formals:     returns: <none>
  state: { x; y; z }
         { *x; *y; *z; s1->fst; s1->snd; s2->fst; s2->snd; t; a; b; c; 
           s.fst; s.snd }
         { s1; s2 }
[alias] Analysis complete
