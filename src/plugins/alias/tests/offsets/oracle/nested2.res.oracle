[kernel] Parsing nested2.c (with preprocessing)
[alias] analysing global variable definiton: __fc_rand_max =
  (unsigned long)2147483647;
[alias] May-aliases after global variable definition  __fc_rand_max  are  <none>
[alias] May-alias graph after global variable definition  __fc_rand_max  is
  <empty>
[alias] analysing global variable definiton: __fc_p_random48_counter =
  __fc_random48_counter;
[alias] May-aliases after global variable definition  __fc_p_random48_counter  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after global variable definition  __fc_p_random48_counter
  is    0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing function: main
[alias] analysing instruction: st_1_t x1 = {.a = 0, .b = 1};
[alias] May-aliases after instruction  st_1_t x1 = {.a = 0, .b = 1};  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  st_1_t x1 = {.a = 0, .b = 1};  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing instruction: st_1_t x2 = {.a = 2, .b = 3};
[alias] May-aliases after instruction  st_1_t x2 = {.a = 2, .b = 3};  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  st_1_t x2 = {.a = 2, .b = 3};  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
[alias] analysing instruction: st_2_t *z1 = malloc(sizeof(st_2_t));
[alias] May-aliases after instruction  st_2_t *z1 = malloc(sizeof(st_2_t));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  st_2_t *z1 = malloc(sizeof(st_2_t));
  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ z1 } → 5:{  }
[alias] analysing instruction: st_3_t *t = malloc(sizeof(st_3_t));
[alias] May-aliases after instruction  st_3_t *t = malloc(sizeof(st_3_t));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  st_3_t *t = malloc(sizeof(st_3_t));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ z1 } → 5:{  }   6:{ t } → 7:{  }
[alias] analysing instruction: int *a = malloc(sizeof(int));
[alias] May-aliases after instruction  int *a = malloc(sizeof(int));  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  int *a = malloc(sizeof(int));  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ z1 } → 5:{  }   6:{ t } → 7:{  }   8:{ a } → 9:{  }
[alias] analysing instruction: *a = 0;
[alias] May-aliases after instruction  *a = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  *a = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ z1 } → 5:{  }   6:{ t } → 7:{  }   8:{ a } → 9:{  }
[alias] analysing instruction: z1->s[0] = (struct struct_1_t *)(& x1);
[alias] May-aliases after instruction  z1->s[0] = (struct struct_1_t *)(& x1);  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  z1->s[0] = (struct struct_1_t *)(& x1);
  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ z1 } → 5:{  }   5:{  } -s→ 10:{  }   6:{ t } → 7:{  }
  8:{ a } → 9:{  }   10:{  } → 11:{  }   11:{  } → 12:{ x1 }
[alias] analysing instruction: z1->s[1] = (struct struct_1_t *)(& x2);
[alias] May-aliases after instruction  z1->s[1] = (struct struct_1_t *)(& x2);  are
  { __fc_random48_counter; __fc_p_random48_counter }
[alias] May-alias graph after instruction  z1->s[1] = (struct struct_1_t *)(& x2);
  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ z1 } → 5:{  }   5:{  } -s→ 10:{  }   6:{ t } → 7:{  }
  8:{ a } → 9:{  }   10:{  } → 11:{  }   11:{  } → 12:{ x1; x2 }
[alias] analysing instruction: z1->c = a;
[alias] May-aliases after instruction  z1->c = a;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { z1->c; a }
[alias] May-alias graph after instruction  z1->c = a;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  4:{ z1 } → 5:{  }   5:{  } -s→ 10:{  }   5:{  } -c→ 16:{ a }
  6:{ t } → 7:{  }   10:{  } → 11:{  }   11:{  } → 12:{ x1; x2 }
  16:{ a } → 9:{  }
[alias] analysing instruction: t->t = (struct struct_2_t *)z1;
[alias] May-aliases after instruction  t->t = (struct struct_2_t *)z1;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { t->t; z1 }
  { (t->t)->c; z1->c; a }  { (t->t)->s; z1->s }  { (t->t)->s[0..]; z1->s[0..] }
[alias] May-alias graph after instruction  t->t = (struct struct_2_t *)z1;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  5:{  } -s→ 10:{  }   5:{  } -c→ 16:{ a }   6:{ t } → 7:{  }
  7:{  } -t→ 17:{ z1 }   10:{  } → 11:{  }   11:{  } → 12:{ x1; x2 }
  16:{ a } → 9:{  }   17:{ z1 } → 5:{  }
[alias] analysing instruction: t->d = a;
[alias] May-aliases after instruction  t->d = a;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { t->t; z1 }
  { (t->t)->c; z1->c; t->d; a }  { (t->t)->s; z1->s }
  { (t->t)->s[0..]; z1->s[0..] }
[alias] May-alias graph after instruction  t->d = a;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  5:{  } -s→ 10:{  }   5:{  } -c→ 18:{ a }   6:{ t } → 7:{  }
  7:{  } -t→ 17:{ z1 }   7:{  } -d→ 18:{ a }   10:{  } → 11:{  }
  11:{  } → 12:{ x1; x2 }   17:{ z1 } → 5:{  }   18:{ a } → 9:{  }
[alias] analysing instruction: __retres = 0;
[alias] May-aliases after instruction  __retres = 0;  are
  { __fc_random48_counter; __fc_p_random48_counter }  { t->t; z1 }
  { (t->t)->c; z1->c; t->d; a }  { (t->t)->s; z1->s }
  { (t->t)->s[0..]; z1->s[0..] }
[alias] May-alias graph after instruction  __retres = 0;  is
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  5:{  } -s→ 10:{  }   5:{  } -c→ 18:{ a }   6:{ t } → 7:{  }
  7:{  } -t→ 17:{ z1 }   7:{  } -d→ 18:{ a }   10:{  } → 11:{  }
  11:{  } → 12:{ x1; x2 }   17:{ z1 } → 5:{  }   18:{ a } → 9:{  }
[alias] May-aliases at the end of function main:
  { __fc_random48_counter; __fc_p_random48_counter }  { t->t; z1 }
  { (t->t)->c; z1->c; t->d; a }  { (t->t)->s; z1->s }
  { (t->t)->s[0..]; z1->s[0..] }
[alias] May-alias graph at the end of function main:
  0:{ __fc_random48_counter; __fc_p_random48_counter } → 1:{  }
  5:{  } -s→ 10:{  }   5:{  } -c→ 18:{ a }   6:{ t } → 7:{  }
  7:{  } -t→ 17:{ z1 }   7:{  } -d→ 18:{ a }   10:{  } → 11:{  }
  11:{  } → 12:{ x1; x2 }   17:{ z1 } → 5:{  }   18:{ a } → 9:{  }
[alias] Summary of function main:
  formals:     returns: __retres
  state: { __fc_random48_counter; __fc_p_random48_counter }  { t->t; z1 }
         { (t->t)->c; z1->c; t->d; a }  { (t->t)->s; z1->s }
         { (t->t)->s[0..]; z1->s[0..] }
[alias] Analysis complete
