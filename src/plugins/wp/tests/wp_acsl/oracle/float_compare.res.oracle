# frama-c -wp [...]
[kernel] Parsing float_compare.i (no preprocessing)
[wp] Running WP plugin...
[wp] [Valid] Goal cmp_dd_exits (Cfg) (Unreachable)
[wp] [Valid] Goal cmp_dd_terminates (Cfg) (Trivial)
[wp] Warning: Missing RTE guards
[wp] [Valid] Goal cmp_fd_exits (Cfg) (Unreachable)
[wp] [Valid] Goal cmp_fd_terminates (Cfg) (Trivial)
[wp] [Valid] Goal cmp_ff_exits (Cfg) (Unreachable)
[wp] [Valid] Goal cmp_ff_terminates (Cfg) (Trivial)
[wp] [Valid] Goal cmp_fnan_exits (Cfg) (Unreachable)
[wp] [Valid] Goal cmp_fnan_terminates (Cfg) (Trivial)
------------------------------------------------------------
  Global
------------------------------------------------------------

Goal Lemma 'finite_32_64':
Assume Lemmas: 'test_double_compare_greater' 'test_float_compare_greater'
  'test_double_compare' 'test_float_compare'
Assume { Have: is_finite_f32(x). }
Prove: is_finite_f64(to_f64(of_f32(x))).

------------------------------------------------------------

Goal Lemma 'finite_32_64_real':
Assume Lemmas: 'finite_32_64' 'test_double_compare_greater'
  'test_float_compare_greater' 'test_double_compare' 'test_float_compare'
Let r = of_f32(x). Assume { Have: is_finite_f32(x). }
Prove: of_f64(to_f64(r)) = r.

------------------------------------------------------------

Goal Lemma 'test_double_compare':
Assume Lemmas: 'test_float_compare'
Assume { Have: is_finite_f64(x). Have: is_finite_f64(y). Have: le_f64(x, y).
}
Prove: eq_f64(x, y) \/ lt_f64(x, y).

------------------------------------------------------------

Goal Lemma 'test_double_compare_greater':
Assume Lemmas: 'test_float_compare_greater' 'test_double_compare'
  'test_float_compare'
Assume { Have: is_finite_f64(x). Have: is_finite_f64(y). Have: le_f64(y, x).
}
Prove: eq_f64(x, y) \/ lt_f64(y, x).

------------------------------------------------------------

Goal Lemma 'test_float_compare':
Assume { Have: is_finite_f32(x). Have: is_finite_f32(y). Have: le_f32(x, y).
}
Prove: eq_f32(x, y) \/ lt_f32(x, y).

------------------------------------------------------------

Goal Lemma 'test_float_compare_greater':
Assume Lemmas: 'test_double_compare' 'test_float_compare'
Assume { Have: is_finite_f32(x). Have: is_finite_f32(y). Have: le_f32(y, x).
}
Prove: eq_f32(x, y) \/ lt_f32(y, x).

------------------------------------------------------------
------------------------------------------------------------
  Function cmp_dd
------------------------------------------------------------

Goal Post-condition 'DEF' in 'cmp_dd':
Assume { (* Pre-condition *) Have: is_finite_f64(a) /\ is_finite_f64(b). }
Prove: (if lt_f64b(a, b) then 1 else 0)
         = (if (of_f64(a) < of_f64(b)) then 1 else 0).

------------------------------------------------------------

Goal Post-condition 'REL1' in 'cmp_dd':
Assume { (* Pre-condition *) Have: is_finite_f64(a) /\ is_finite_f64(b). }
Prove: lt_f64(a, b) <-> (of_f64(a) < of_f64(b)).

------------------------------------------------------------

Goal Post-condition 'REL2' in 'cmp_dd':
Assume { (* Pre-condition *) Have: is_finite_f64(a) /\ is_finite_f64(b). }
Prove: lt_f64(a, b) <-> (of_f64(a) < of_f64(b)).

------------------------------------------------------------
------------------------------------------------------------
  Function cmp_fd
------------------------------------------------------------

Goal Post-condition 'DEF' in 'cmp_fd':
Let r = of_f32(a).
Let a_1 = to_f64(r).
Assume {
  (* Pre-condition *)
  Have: is_finite_f32(a) /\ is_finite_f64(b).
  (* Assertion *)
  Have: is_finite_f64(a_1).
  (* Assertion *)
  Have: of_f64(a_1) = r.
}
Prove: (if lt_f64b(a_1, b) then 1 else 0)
         = (if (r < of_f64(b)) then 1 else 0).

------------------------------------------------------------

Goal Post-condition 'REL1' in 'cmp_fd':
Let r = of_f32(a).
Let a_1 = to_f64(r).
Assume {
  (* Pre-condition *)
  Have: is_finite_f32(a) /\ is_finite_f64(b).
  (* Assertion *)
  Have: is_finite_f64(a_1).
  (* Assertion *)
  Have: of_f64(a_1) = r.
}
Prove: lt_f64(a_1, b) <-> (r < of_f64(b)).

------------------------------------------------------------

Goal Post-condition 'REL2' in 'cmp_fd':
Let r = of_f32(a).
Let a_1 = to_f64(r).
Assume {
  (* Pre-condition *)
  Have: is_finite_f32(a) /\ is_finite_f64(b).
  (* Assertion *)
  Have: is_finite_f64(a_1).
  (* Assertion *)
  Have: of_f64(a_1) = r.
}
Prove: lt_f64(a_1, b) <-> (r < of_f64(b)).

------------------------------------------------------------

Goal Assertion (file float_compare.i, line 63):
Assume { (* Pre-condition *) Have: is_finite_f32(a) /\ is_finite_f64(b). }
Prove: is_finite_f64(to_f64(of_f32(a))).

------------------------------------------------------------

Goal Assertion (file float_compare.i, line 64):
Let r = of_f32(a).
Let a_1 = to_f64(r).
Assume {
  (* Pre-condition *)
  Have: is_finite_f32(a) /\ is_finite_f64(b).
  (* Assertion *)
  Have: is_finite_f64(a_1).
}
Prove: of_f64(a_1) = r.

------------------------------------------------------------
------------------------------------------------------------
  Function cmp_ff
------------------------------------------------------------

Goal Post-condition 'DEF' in 'cmp_ff':
Assume { (* Pre-condition *) Have: is_finite_f32(a) /\ is_finite_f32(b). }
Prove: (if lt_f32b(a, b) then 1 else 0)
         = (if (of_f32(a) < of_f32(b)) then 1 else 0).

------------------------------------------------------------

Goal Post-condition 'REL1' in 'cmp_ff':
Assume { (* Pre-condition *) Have: is_finite_f32(a) /\ is_finite_f32(b). }
Prove: lt_f32(a, b) <-> (of_f32(a) < of_f32(b)).

------------------------------------------------------------

Goal Post-condition 'REL2' in 'cmp_ff':
Assume { (* Pre-condition *) Have: is_finite_f32(a) /\ is_finite_f32(b). }
Prove: lt_f32(a, b) <-> (of_f32(a) < of_f32(b)).

------------------------------------------------------------
------------------------------------------------------------
  Function cmp_fnan
------------------------------------------------------------

Goal Post-condition 'POS' in 'cmp_fnan':
Prove: true.

------------------------------------------------------------

Goal Post-condition 'NEG' in 'cmp_fnan':
Prove: true.

------------------------------------------------------------
