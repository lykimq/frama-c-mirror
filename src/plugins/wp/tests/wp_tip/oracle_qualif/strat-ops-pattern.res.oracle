# frama-c -wp [...]
[kernel] Parsing strat-ops-pattern.i (no preprocessing)
[wp] Running WP plugin...
[wp] [Valid] Goal target_exits (Cfg) (Unreachable)
[wp] [Valid] Goal target_terminates (Cfg) (Trivial)
[wp] Warning: Missing RTE guards
[wp] 2 goals scheduled
[wp] [Valid] typed_target_assigns (Qed)
[wp] [Unsuccess] typed_target_ensures_post (Tactic) (Qed)
[wp] Proved goals:    3 / 4
  Terminating:     1
  Unreachable:     1
  Qed:             1
  Unsuccess:       1
------------------------------------------------------------
  Function target
------------------------------------------------------------

Goal Post-condition 'post' in 'target':
Assume {
  Type: is_uint32(t) /\ is_uint32(x) /\ is_uint32(y) /\ is_uint32(z).
  (* Pre-condition *)
  Have: (x = 0) \/ (z != 2) \/ ((z % t) = y) \/ (t < y) \/ (z <= t).
}
Prove: P_P(to_sint32(t + to_uint32(z + to_uint32(x + y)))).
Prover Script returns Unsuccess

------------------------------------------------------------
Subgoal 1/5:
 - Post-condition 'post'
 - Split (Case 1/5)
Goal Wp.Tactical.typed_target_ensures_post-0 (generated):
Assume { Type: is_uint32(t) /\ is_uint32(y) /\ is_uint32(z). }
Prove: P_P(to_sint32(t + to_uint32(y + z))).

------------------------------------------------------------
Subgoal 2/5:
 - Post-condition 'post'
 - Split (Case 2/5)
Goal Wp.Tactical.typed_target_ensures_post-1 (generated):
Assume {
  Type: is_uint32(t) /\ is_uint32(x) /\ is_uint32(y) /\ is_uint32(z).
  (* Case 2/5 *)
  When: z != 2.
}
Prove: P_P(to_sint32(t + to_uint32(z + to_uint32(x + y)))).

------------------------------------------------------------
Subgoal 3/5:
 - Post-condition 'post'
 - Split (Case 3/5)
Goal Wp.Tactical.typed_target_ensures_post-2 (generated):
Let x_1 = z % t.
Assume {
  Type: is_uint32(t) /\ is_uint32(x) /\ is_uint32(z) /\ is_uint32(x_1).
}
Prove: P_P(to_sint32(t + to_uint32(z + to_uint32(x + x_1)))).

------------------------------------------------------------
Subgoal 4/5:
 - Post-condition 'post'
 - Split (Case 4/5)
Goal Wp.Tactical.typed_target_ensures_post-3 (generated):
Assume {
  Type: is_uint32(t) /\ is_uint32(x) /\ is_uint32(y) /\ is_uint32(z).
  (* Case 4/5 *)
  When: t < y.
}
Prove: P_P(to_sint32(t + to_uint32(z + to_uint32(x + y)))).

------------------------------------------------------------
Subgoal 5/5:
 - Post-condition 'post'
 - Split (Case 5/5)
Goal Wp.Tactical.typed_target_ensures_post-4 (generated):
Assume {
  Type: is_uint32(t) /\ is_uint32(x) /\ is_uint32(y) /\ is_uint32(z).
  (* Case 5/5 *)
  When: z <= t.
}
Prove: P_P(to_sint32(t + to_uint32(z + to_uint32(x + y)))).

------------------------------------------------------------
------------------------------------------------------------
 Functions                 WP     Alt-Ergo  Total   Success
  target                    1        -        2      50.0%
------------------------------------------------------------
