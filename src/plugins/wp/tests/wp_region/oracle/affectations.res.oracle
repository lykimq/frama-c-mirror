# frama-c -wp -wp-model 'Region' [...]
[kernel] Parsing affectations.c (with preprocessing)
[wp] Running WP plugin...
[wp] [Valid] Goal f_exits (Cfg) (Unreachable)
[wp] [Valid] Goal f_terminates (Cfg) (Trivial)
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function f
------------------------------------------------------------

Goal Assigns (file affectations.c, line 8) in 'f' (1/2):
Effect at line 20
Prove: true.

------------------------------------------------------------

Goal Assigns (file affectations.c, line 8) in 'f' (2/2):
Effect at line 21
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f with behavior EQ
------------------------------------------------------------

Goal Post-condition for 'EQ' 'P' in 'f':
Prove: true.

------------------------------------------------------------

Goal Post-condition for 'EQ' 'Q' in 'f':
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function f with behavior SEP
------------------------------------------------------------

Goal Post-condition for 'SEP' 'Q' in 'f':
Let x = Msint32_0[p].
Let x_1 = 1 + x.
Let m = Msint32_0[p <- x_1].
Let x_2 = m[q].
Let x_3 = x_2 - 1.
Let x_4 = m[q <- x_3][p].
Assume {
  Type: is_sint32(x) /\ is_sint32(Msint32_0[q]) /\ is_sint32(x_2) /\
      is_sint32(x_3) /\ is_sint32(x_4).
  (* Heap *)
  Type: (region(p.base) <= 0) /\ (region(q.base) <= 0) /\ linked(alloc_0).
  (* Pre-condition *)
  Have: valid_rw(alloc_0, p, 4).
  (* Pre-condition *)
  Have: valid_rw(alloc_0, q, 4).
  (* Pre-condition *)
  Have: P_pointed(p, q).
  (* Pre-condition for 'SEP' *)
  Have: q != p.
}
Prove: x_4 = x_1.

------------------------------------------------------------

Goal Post-condition for 'SEP' 'Q' in 'f':
Let x = Msint32_0[p].
Let x_1 = Msint32_0[q].
Let m = Msint32_0[p <- 1 + x].
Let x_2 = m[q].
Let x_3 = x_2 - 1.
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(m[q <- x_3][p]).
  (* Heap *)
  Type: (region(p.base) <= 0) /\ (region(q.base) <= 0) /\ linked(alloc_0).
  (* Pre-condition *)
  Have: valid_rw(alloc_0, p, 4).
  (* Pre-condition *)
  Have: valid_rw(alloc_0, q, 4).
  (* Pre-condition *)
  Have: P_pointed(p, q).
  (* Pre-condition for 'SEP' *)
  Have: q != p.
}
Prove: x_2 = x_1.

------------------------------------------------------------
