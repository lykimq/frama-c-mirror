# frama-c -wp -wp-model 'Region' [...]
[kernel] Parsing array.c (with preprocessing)
[wp] Running WP plugin...
[wp] [Valid] Goal add_first4_exits (Cfg) (Unreachable)
[wp] [Valid] Goal add_first4_terminates (Cfg) (Trivial)
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function add_first4
------------------------------------------------------------

Goal Post-condition (file array.c, line 12) in 'add_first4':
Let a_1 = shiftfield_F1_S_content(a).
Let a_2 = shift_sint32(a_1, 0).
Let x = Msint32_0[a_2].
Let a_3 = shift_sint32(a_1, 1).
Let x_1 = Msint32_0[a_3].
Let a_4 = shift_sint32(a_1, 2).
Let x_2 = Msint32_0[a_4].
Let a_5 = shift_sint32(a_1, 3).
Let x_3 = Msint32_0[a_5].
Let a_6 = shiftfield_F1_S_content(b).
Let x_4 = Msint32_0[shift_sint32(a_6, 0)].
Let a_7 = shift_sint32(a_6, 2).
Let m = Msint32_0[a_2 <- x + x_4].
Let x_5 = m[shift_sint32(a_6, 1)].
Let m_1 = m[a_3 <- x_1 + x_5].
Let x_6 = m_1[a_7].
Let x_7 = x_2 + x_6.
Let m_2 = m_1[a_4 <- x_7].
Let x_8 = m_2[shift_sint32(a_6, 3)].
Let x_9 = m_2[a_5 <- x_3 + x_8][a_7].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(Msint32_0[shift_sint32(a_1, 4)]) /\ is_sint32(x_4) /\
      is_sint32(Msint32_0[a_7]) /\ is_sint32(x_5) /\ is_sint32(x_6) /\
      is_sint32(x_7) /\ is_sint32(x_8) /\ is_sint32(x_9).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Goal *)
  When: b != a.
  (* Pre-condition *)
  Have: P_pointed(a, b).
}
Prove: x_9 = x_6.

------------------------------------------------------------

Goal Post-condition (file array.c, line 13) in 'add_first4':
Prove: true.

------------------------------------------------------------

Goal Post-condition (file array.c, line 14) in 'add_first4':
Let a_1 = shiftfield_F1_S_content(a).
Let a_2 = shift_sint32(a_1, 0).
Let x = Msint32_0[a_2].
Let a_3 = shift_sint32(a_1, 1).
Let x_1 = Msint32_0[a_3].
Let a_4 = shift_sint32(a_1, 2).
Let x_2 = Msint32_0[a_4].
Let a_5 = shift_sint32(a_1, 3).
Let x_3 = Msint32_0[a_5].
Let a_6 = shiftfield_F1_S_content(b).
Let x_4 = Msint32_0[shift_sint32(a_6, 0)].
Let a_7 = shift_sint32(a_6, 2).
Let x_5 = Msint32_0[a_7].
Let m = Msint32_0[a_2 <- x + x_4].
Let x_6 = m[shift_sint32(a_6, 1)].
Let m_1 = m[a_3 <- x_1 + x_6].
Let x_7 = m_1[a_7].
Let x_8 = x_2 + x_7.
Let m_2 = m_1[a_4 <- x_8].
Let x_9 = m_2[shift_sint32(a_6, 3)].
Assume {
  Type: is_sint32(x) /\ is_sint32(x_1) /\ is_sint32(x_2) /\ is_sint32(x_3) /\
      is_sint32(Msint32_0[shift_sint32(a_1, 4)]) /\ is_sint32(x_4) /\
      is_sint32(x_5) /\ is_sint32(x_6) /\ is_sint32(x_7) /\ is_sint32(x_8) /\
      is_sint32(x_9) /\ is_sint32(m_2[a_5 <- x_3 + x_9][a_7]).
  (* Heap *)
  Type: (region(a.base) <= 0) /\ (region(b.base) <= 0).
  (* Pre-condition *)
  Have: P_pointed(a, b).
}
Prove: x_7 = x_5.

------------------------------------------------------------

Goal Post-condition (file array.c, line 15) in 'add_first4':
Prove: true.

------------------------------------------------------------
