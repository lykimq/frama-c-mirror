# frama-c -wp [...]
[kernel] Parsing euclid3.c (with preprocessing)
[wp] Running WP plugin...
[wp] [Valid] Goal euclid_gcd_exits (Cfg) (Unreachable)
[wp] [Valid] Goal euclid_gcd_terminates (Cfg) (Trivial)
[wp] Warning: Missing RTE guards
------------------------------------------------------------
  Function euclid_gcd
------------------------------------------------------------

Goal Post-condition (file euclid3.c, line 11) in 'euclid_gcd':
Let x = number.Gcd.gcd(a, b).
Assume {
  Type: is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(a_2) /\ is_sint32(b) /\
      is_sint32(euclid_gcd_0).
  (* Pre-condition *)
  Have: IAbs.abs(a) <= 2147483647.
  (* Pre-condition *)
  Have: IAbs.abs(b) <= 2147483647.
  (* Invariant *)
  Have: number.Gcd.gcd(a_2, 0) = x.
  If a_2 < 0
  Then { Have: a_2 = a_1. Have: (a_1 + euclid_gcd_0) = 0. }
  Else { Have: euclid_gcd_0 = a_2. }
}
Prove: x = euclid_gcd_0.

------------------------------------------------------------

Goal Preservation of Invariant (file euclid3.c, line 19):
Let x = number.Gcd.gcd(a_2, b).
Let x_1 = a_1 % a.
Assume {
  Type: is_sint32(a_2) /\ is_sint32(a) /\ is_sint32(a_1) /\ is_sint32(b) /\
      is_sint32(x_1).
  (* Pre-condition *)
  Have: IAbs.abs(a_2) <= 2147483647.
  (* Pre-condition *)
  Have: IAbs.abs(b) <= 2147483647.
  (* Invariant *)
  Have: number.Gcd.gcd(a_1, a) = x.
  (* Then *)
  Have: a != 0.
}
Prove: number.Gcd.gcd(a, x_1) = x.

------------------------------------------------------------

Goal Establishment of Invariant (file euclid3.c, line 19):
Prove: true.

------------------------------------------------------------

Goal Loop assigns (file euclid3.c, line 18):
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'euclid_gcd' (1/3):
Effect at line 22
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'euclid_gcd' (2/3):
Effect at line 27
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'euclid_gcd' (3/3):
Effect at line 27
Prove: true.

------------------------------------------------------------

Goal Decreasing of Loop variant at loop (file euclid3.c, line 22):
Let x = a % a_1.
Let x_1 = number.Gcd.gcd(a_2, b).
Assume {
  Type: is_sint32(a_2) /\ is_sint32(a_1) /\ is_sint32(a) /\ is_sint32(b) /\
      is_sint32(x).
  (* Pre-condition *)
  Have: IAbs.abs(a_2) <= 2147483647.
  (* Pre-condition *)
  Have: IAbs.abs(b) <= 2147483647.
  (* Invariant *)
  Have: number.Gcd.gcd(a, a_1) = x_1.
  (* Then *)
  Have: a_1 != 0.
  (* Invariant *)
  Have: number.Gcd.gcd(a_1, x) = x_1.
}
Prove: IAbs.abs(x) < IAbs.abs(a_1).

------------------------------------------------------------

Goal Positivity of Loop variant at loop (file euclid3.c, line 22):
Prove: true.

------------------------------------------------------------
------------------------------------------------------------
  Function minmax_gcd
------------------------------------------------------------

Goal Termination-condition (generated) in 'minmax_gcd':
Prove: true.

------------------------------------------------------------

Goal Post-condition (file euclid3.c, line 36) in 'minmax_gcd':
Let x = number.Gcd.gcd(tmp_0, tmp_0_0).
Assume {
  Type: is_sint32(a) /\ is_sint32(b) /\ is_sint32(c) /\ is_sint32(d) /\
      is_sint32(tmp_0) /\ is_sint32(tmp_0_0) /\ is_sint32(x).
  (* Pre-condition *)
  Have: IAbs.abs(a) <= 2147483647.
  (* Pre-condition *)
  Have: IAbs.abs(b) <= 2147483647.
  (* Pre-condition *)
  Have: IAbs.abs(c) <= 2147483647.
  (* Pre-condition *)
  Have: IAbs.abs(d) <= 2147483647.
  If b < a
  Then { Have: tmp_0 = b. }
  Else { Have: tmp_0 = a. }
  If d < c
  Then { Have: tmp_0_0 = c. }
  Else { Have: tmp_0_0 = d. }
  (* Call 'euclid_gcd' *)
  Have: (IAbs.abs(tmp_0) <= 2147483647) /\ (IAbs.abs(tmp_0_0) <= 2147483647).
}
Prove: number.Gcd.gcd(int.MinMax.min(a, b), int.MinMax.max(c, d)) = x.

------------------------------------------------------------

Goal Exit-condition (generated) in 'minmax_gcd':
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (1/5):
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (2/5):
Effect at line 40
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (3/5):
Effect at line 40
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (4/5):
Effect at line 41
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (5/5):
Effect at line 41
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (1/6):
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (2/6):
Effect at line 40
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (3/6):
Effect at line 40
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (4/6):
Effect at line 41
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (5/6):
Effect at line 41
Prove: true.

------------------------------------------------------------

Goal Assigns nothing in 'minmax_gcd' (6/6):
Call Result at line 42
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file euclid3.c, line 8) in 'euclid_gcd'' in 'minmax_gcd' at call 'euclid_gcd' (file euclid3.c, line 42)
:
Prove: true.

------------------------------------------------------------

Goal Instance of 'Pre-condition (file euclid3.c, line 9) in 'euclid_gcd'' in 'minmax_gcd' at call 'euclid_gcd' (file euclid3.c, line 42)
:
Prove: true.

------------------------------------------------------------
