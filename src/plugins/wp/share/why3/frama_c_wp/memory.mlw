(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2025                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

theory Memory

  use bool.Bool
  use int.Int
  use map.Map
  use frama_c_wp.memaddr.MemAddr

  (* Memories *)

  predicate sconst (map addr int)
  predicate framed (m : map addr addr) =
    forall p:addr [m[p]]. region(p.base) <= 0 -> region(m[p].base) <= 0

  predicate eqmem (m1 m2 : map addr 'a) (p:addr) (a:int) =
    forall q:addr [m1[p]|m2[q]]. included q 1 p a -> m1[q] = m2[q]


  (* copies the [s] bytes from [m1].[b1] into [m0].[m0] *)
  function memcpy (m0 m1: map addr 'a) (b0 b1:addr) (s:int) : map addr 'a =
    fun (p:addr) ->
    if separated p 1 b0 s then m0 p else
    let offset = b1.offset - b0.offset + p.offset in
    m1 { b1 with offset = offset }
(*
  function havoc (m0 m1 : map addr 'a) (p:addr) (a:int) : map addr 'a =
    memcpy m1 m0 p p a
*)
  lemma eqmem_included :
    forall m1 m2 : map addr 'a.
    forall p q : addr.
    forall a b : int
      [ eqmem m1 m2 p a,eqmem m1 m2 q b ].
    included p a q b -> eqmem m1 m2 q b -> eqmem m1 m2 p a

  lemma eqmem_sym :
    forall m1 m2 : map addr 'a.
    forall p : addr.
    forall a : int.
    eqmem m1 m2 p a -> eqmem m2 m1 p a

  lemma havoc_access :
    forall m0 m1 : map addr 'a.
    forall q p : addr.
    forall a : int.
    (Map.([]) (memcpy m1 m0 p p a) (q)) =
      (if (separated q 1 p a) then (Map.([]) (m1) (q)) else (Map.([]) (m0) (q)))

  (* Initialization memory *)

  predicate cinits (map addr bool)

  predicate is_init_range(m: map addr bool) (p: addr) (l: int) =
    forall i : int. 0 <= i < l -> m[shift p i] = true

  function set_init (m: map addr bool) (p:addr) (a:int) : map addr bool

  axiom set_init_access :
    forall m : map addr bool.
    forall q p : addr.
    forall a : int.
    (Map.([]) (set_init m p a) (q)) =
      (if (separated q 1 p a) then (Map.([]) (m) (q)) else true)

  predicate monotonic_init(m1 m2 : map addr bool) =
    forall p: addr. m1[p] -> m2[p]

end
