(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2025                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* -------------------------------------------------------------------------- *)
(* --- C-Bits Arithmetics for Why-3                                       --- *)
(* -------------------------------------------------------------------------- *)

theory Cbits

  use int.Int
  use bool.Bool
  use frama_c_wp.cint.Cint
  use frama_c_wp.qed.Qed


  function bit_testb int int : bool
  predicate bit_test int int

  (** * C-Integer Bits * **)

  function lnot (x:int) : int = -x-1

  function land int int : int
  clone algebra.AC as Land with type t = int, function op = land, axiom .

  function lxor int int : int
  clone algebra.AC as Lxor with type t = int, function op = lxor, axiom .

  function lor  int int : int
  clone algebra.AC as Lor  with type t = int, function op = lor, axiom .

  function lsl  int int : int
  function lsr  int int : int


(** * Bitwise identities *)

(** ** land identities *)
  axiom land_idemp: forall x:int [land x x]. (land x x) = x
  axiom land_idemp_bis: forall x y : int [land x (land x y)]. land x (land x y) = land x y
  axiom land_0: forall x:int [land 0 x]. (land 0 x) = 0
  axiom land_0bis: forall x:int [land x 0]. (land x 0) = 0
  axiom land_1: forall x:int [land (-1) x]. (land (-1) x) = x
  axiom land_1bis: forall x:int [land x (-1)]. (land x (-1)) = x

(** ** lor identities *)
  axiom lor_idemp: forall x:int [lor x x]. (lor x x) = x
  axiom lor_idemp_bis: forall x y : int [lor x (lor x y)]. lor x (lor x y) = lor x y
  axiom lor_1:     forall x:int [lor (-1) x]. (lor (-1) x) = -1
  axiom lor_1bis:  forall x:int [lor x (-1)]. (lor x (-1)) = -1
  axiom lor_0:     forall x:int [lor 0 x]. (lor 0 x) = x
  axiom lor_0bis:  forall x:int [lor x 0]. (lor x 0) = x

(** ** lxor identities *)
  axiom lxor_nilpotent: forall x:int [lxor x x]. (lxor x x) = 0
  axiom lxor_nilpotent_bis: forall x y : int [lxor x (lxor x y)]. lxor x (lxor x y) = y
  axiom lxor_1:    forall x:int [lxor (-1) x]. (lxor (-1) x) = (lnot x)
  axiom lxor_1bis: forall x:int [lxor x (-1)]. (lxor x (-1)) = (lnot x)
  axiom lxor_0:    forall x:int [lxor 0 x]. (lxor 0 x) = x
  axiom lxor_0bis: forall x:int [lxor x 0]. (lxor x 0) = x

(** ** lsl identities *)

  axiom lsl_0: forall x:int. lsl x 0 = x
  axiom lsl_1: forall x:int. lsl x 1 = 2 * x
  axiom lsl_add: forall x p q:int. 0 <= p -> 0 <= q -> lsl (lsl x p) q = lsl x (p+q)

(** ** lsr identities *)

  axiom lsr_0: forall x:int. lsr x 0 = x
  axiom lsr_1: forall x:int. 0 <= x -> lsr x 1 = CD.div x 2
  axiom lsr_add: forall x p q :int. 0 <= p -> 0 <= q -> lsr (lsr x p) q = lsr x (p+q)

(** ** lsl+lsr combination *)

  axiom lsl_lsr_add: forall x p q:int. 0 <= q <= p -> lsr (lsl x p) q = lsl x (p-q)

(** * Bit extraction *)
(** ** Definition of bit_test predicate *)

  axiom bit_test_def: forall x k:int [bit_testb x k].
    (bit_testb x k = True) <-> bit_test x k

(** * Link between Bit extraction and bitwise operators *)
(** ** Some properties of bit extration *)
(** ** Logical operators *)

  axiom bit_test_extraction: forall x k:int [land x (lsl 1 k)|land (lsl 1 k) x].
    0<=k -> (land x (lsl 1 k))<>0 <-> (bit_test x k)

  axiom lsl_1_0:
    lsl 1 0 = 1
  axiom bit_test_extraction_bis: forall x :int [land x 1|land 1 x].
    (land 1 x)<>0 -> (bit_test x 0)
  axiom bit_test_extraction_bis_eq: forall x :int [land x 1|land 1 x].
    (bit_test x 0) -> (land 1 x)=1

  axiom lnot_extraction:      forall x i:int [bit_test  (lnot x) i].
    0<=i -> (bit_test (lnot x) i) <-> not (bit_test x i)

  axiom land_extraction:      forall x y i:int [bit_test  (land x y) i].
    0<=i -> bit_test (land x y) i <-> ((bit_test x i) /\ (bit_test y i))

  axiom lor_extraction:      forall x y i:int [bit_test  (lor x y) i].
    0<=i -> (bit_test (lor x y) i) <-> ((bit_test x i) \/ (bit_test y i))

  axiom lxor_extraction: forall x y i:int [bit_test (lxor x y) i].
    0<=i -> (bit_test (lxor x y) i) <-> ((bit_test x i) <-> not (bit_test y i))

(** ** Shift operators *)

  axiom land_1_lsl_1 : forall a x n : int [(lsl 1 (1+n)),(lsl 1 n),(2*a+(land 1 x))] .
    0<=n -> a<lsl 1 n -> 2*a+(land 1 x)<lsl 1 (1+n)

  axiom lsl_extraction_sup:      forall x n m:int [bit_test  (lsl x n) m].
    0<=n -> 0<=m -> m>=n -> (bit_test (lsl x n) m) <-> (bit_test x (m-n))

  axiom lsl_extraction_inf:      forall x n m:int [bit_test  (lsl x n) m].
    0<=n -> 0<=m -> m< n -> not (bit_test (lsl x n) m)

  axiom lsr_extractionl:         forall x n m:int [bit_test  (lsr x n) m].
    0<=n -> 0<=m         -> (bit_test (lsr x n) m) <-> (bit_test x (m+n))

  axiom lsl1_extraction: forall i j:int [bit_test (lsl 1 i) j].
    0<=i -> 0<=j         -> (bit_test (lsl 1 i) j) <-> i=j

(** * Link between Bit extraction and C type conversions *)

(** *** Cast to uint8 C type *)
  axiom to_uint8_extraction_sup:      forall x i:int [(is_uint8 x),(bit_test  x i)].
    8<=i -> is_uint8 x -> not (bit_test x i)

  axiom to_uint8_extraction_inf:      forall x i:int [bit_test  (to_uint8 x) i].
    0<=i<8 -> (bit_test (to_uint8 x) i) <-> (bit_test x i)

(** *** Cast to uint16 C type *)
  axiom to_uint16_extraction_sup:      forall x i:int [(is_uint16 x),(bit_test  x i)].
    16<=i -> is_uint16 x -> not (bit_test x i)

  axiom to_uint16_extraction_inf:      forall x i:int [bit_test  (to_uint16 x) i].
    0<=i<16 -> (bit_test (to_uint16 x) i) <-> (bit_test x i)

(** *** Cast to uint32 C type *)
  axiom to_uint32_extraction_sup:      forall x i:int [(is_uint32 x),(bit_test  x i)].
    32<=i -> is_uint32 x -> not (bit_test x i)

  axiom to_uint32_extraction_inf:      forall x i:int [bit_test  (to_uint32 x) i].
    0<=i<32 -> (bit_test (to_uint32 x) i) <-> (bit_test x i)

(** *** Cast to uint64 C type *)
  axiom to_uint64_extraction_sup:      forall x i:int [(is_uint64 x),(bit_test  x i)].
    64<=i -> (is_uint64 x) -> not (bit_test x i)

  axiom to_uint64_extraction_inf:      forall x i:int [bit_test  (to_uint64 x) i].
    0<=i<64 -> (bit_test (to_uint64 x) i) <-> (bit_test x i)

(** *** Cast to sint8 C type *)
  axiom to_sint8_extraction_sup:      forall x i:int [(is_sint8 x),(bit_test  x i)].
    7<=i -> is_sint8 x -> (bit_test x i) <-> x < 0

  axiom to_sint8_extraction_inf:      forall x i:int [(bit_test  (to_sint8 x) i)].
    0<=i<7 -> (bit_test (to_sint8 x) i) <-> (bit_test x i)

(** *** Cast to sint16 C type *)
  axiom to_sint16_extraction_sup:      forall x i:int [(is_sint16 x),(bit_test  x i)].
    15<=i -> is_sint16 x -> (bit_test x i) <-> x < 0

  axiom to_sint16_extraction_inf:      forall x i:int [bit_test  (to_sint16 x) i].
    0<=i<15 -> (bit_test (to_sint16 x) i) <-> (bit_test x i)

(** *** Cast to sint32 C type *)
  axiom to_sint32_extraction_sup: forall x i:int [(is_sint32 x),(bit_test x i)].
    31<=i -> is_sint32 x -> (bit_test x i) <-> x < 0

  axiom to_sint32_extraction_inf:      forall x i:int [bit_test  (to_sint32 x) i].
    0<=i<31 -> (bit_test (to_sint32 x) i) <-> (bit_test x i)

(** *** Cast to sint64 C type *)
  axiom to_sint64_extraction_sup:      forall x i:int [(is_sint64 x),(bit_test  x i)].
    63<=i -> is_sint64 x -> (bit_test x i) <-> x < 0

  axiom to_sint64_extraction_inf:      forall x i:int [bit_test  (to_sint64 x) i].
    0<=i<63 -> (bit_test (to_sint64 x) i) <-> (bit_test x i)

(** * Some C-Integer Bits Conversions are identity *)
(** ** Unsigned conversions *)
  lemma is_uint_lxor : forall n x y:int.
    is_uint n x -> is_uint n y -> to_uint n (lxor x y) = lxor x y

(** *** Cast to uint8 C type *)
  axiom is_uint8_lxor : forall x y:int [to_uint8 (lxor x y)].
    is_uint8 x -> is_uint8 y -> to_uint8 (lxor x y) = lxor x y

  axiom is_uint8_lor : forall x y:int [to_uint8 (lor x y)].
    is_uint8 x -> is_uint8 y -> to_uint8 (lor x y) = lor x y

  axiom is_uint8_land : forall x y:int [to_uint8 (land x y)].
    is_uint8 x -> is_uint8 y -> to_uint8 (land x y) = land x y

  axiom is_uint8_lsr : forall x y:int [to_uint8 (lsr x y)].
    0<=y -> is_uint8 x -> to_uint8 (lsr x y) = lsr x y

  axiom is_uint8_lsl1_inf : forall y:int [to_uint8 (lsl 1 y)].
    0<=y<8 -> to_uint8 (lsl 1 y) = lsl 1 y

  axiom is_uint8_lsl1_sup : forall y:int [to_uint8 (lsl 1 y)].
    8<=y -> to_uint8 (lsl 1 y) = 0

(** ***  Cast to uint16 C type *)
  axiom is_uint16_lxor : forall x y:int [to_uint16 (lxor x y)].
    is_uint16 x -> is_uint16 y -> to_uint16 (lxor x y) = lxor x y

  axiom is_uint16_lor : forall x y:int [to_uint16 (lor x y)].
    is_uint16 x -> is_uint16 y -> to_uint16 (lor x y) = lor x y

  axiom is_uint16_land : forall x y:int [to_uint16 (land x y)].
    is_uint16 x -> is_uint16 y -> to_uint16 (land x y) = land x y

  axiom is_uint16_lsr : forall x y:int [to_uint16 (lsr x y)].
    0<=y -> is_uint16 x -> to_uint16 (lsr x y) = lsr x y

  axiom is_uint16_lsl1_inf : forall y:int [to_uint16 (lsl 1 y)].
    0<=y<16 -> to_uint16 (lsl 1 y) = lsl 1 y

  axiom is_uint16_lsl1_sup : forall y:int [to_uint16 (lsl 1 y)].
    16<=y -> to_uint16 (lsl 1 y) = 0

(** *** Cast to uint32 C type *)
  axiom is_uint32_lxor : forall x y:int [to_uint32 (lxor x y)].
    is_uint32 x -> is_uint32 y -> to_uint32 (lxor x y) = lxor x y

  axiom is_uint32_lor : forall x y:int [to_uint32 (lor x y)].
    is_uint32 x -> is_uint32 y -> to_uint32 (lor x y) = lor x y

  axiom is_uint32_land : forall x y:int [to_uint32 (land x y)].
    is_uint32 x -> is_uint32 y -> to_uint32 (land x y) = land x y

  axiom is_uint32_lsr : forall x y:int [to_uint32 (lsr x y)].
    0<=y -> is_uint32 x -> to_uint32 (lsr x y) = lsr x y

  axiom is_uint32_lsl1_inf : forall y:int [to_uint32 (lsl 1 y)].
    0<=y<32 -> to_uint32 (lsl 1 y) = lsl 1 y

  axiom is_uint32_lsl1_sup : forall y:int [to_uint32 (lsl 1 y)].
    32<=y -> to_uint32 (lsl 1 y) = 0

(** *** Cast to uint64 C type *)
  axiom is_uint64_lxor : forall x y:int [to_uint64 (lxor x y)].
    is_uint64 x -> is_uint64 y -> to_uint64 (lxor x y) =  lxor x y

  axiom is_uint64_lor : forall x y:int [to_uint64 (lor x y)].
    is_uint64 x -> is_uint64 y -> to_uint64 (lor x y) =  lor x y

  axiom is_uint64_land : forall x y:int [to_uint64 (land x y)].
    is_uint64 x -> is_uint64 y -> to_uint64 (land x y) = land x y

  axiom is_uint64_lsr : forall x y:int [to_uint64 (lsr x y)].
    0<=y -> is_uint64 x -> to_uint64 (lsr x y) = lsr x y

  axiom is_uint64_lsl1_inf : forall y:int [to_uint64 (lsl 1 y)].
    0<=y<64 -> to_uint64 (lsl 1 y) = lsl 1 y

  axiom is_uint64_lsl1_sup : forall y:int [to_uint64 (lsl 1 y)].
    64<=y -> to_uint64 (lsl 1 y) = 0

(** *** Cast to sint8 C type *)
  lemma is_sint8_lnot: forall x:int [to_sint8 (lnot x)].
    is_sint8 x ->  to_sint8 (lnot x) = lnot x

  axiom is_sint8_lxor: forall x y:int [to_sint8 (lxor x y)].
    is_sint8 x -> is_sint8 y -> to_sint8 (lxor x y) = lxor x y

  axiom is_sint8_lor: forall x y:int [to_sint8 (lor x y)].
    is_sint8 x -> is_sint8 y -> to_sint8 (lor x y) = lor x y

  axiom is_sint8_land: forall x y:int [to_sint8 (land x y)].
    is_sint8 x -> is_sint8 y -> to_sint8 (land x y) = land x y

  axiom is_sint8_lsr: forall x y:int [to_sint8 (lsr x y)].
    0<=y -> is_sint8 x -> to_sint8 (lsr x y) = lsr x y

  axiom is_sint8_lsl1 :
    lsl 1 7 = Cint.max_sint8

  axiom is_sint8_lsl1_inf : forall y:int [to_sint8 (lsl 1 y)].
    0<=y<7 -> to_sint8 (lsl 1 y) = lsl 1 y

  axiom is_sint8_lsl1_sup : forall y:int [to_sint8 (lsl 1 y)].
    8<=y -> to_sint8 (lsl 1 y) = 0

(** *** Cast to sint16 C type *)
  lemma is_sint16_lnot : forall x:int [to_sint16 (lnot x)].
    is_sint16 x -> to_sint16 (lnot x) = lnot x

  axiom is_sint16_lxor : forall x y:int [to_sint16 (lxor x y)].
    is_sint16 x -> is_sint16 y -> to_sint16 (lxor x y) = lxor x y

  axiom is_sint16_lor : forall x y:int [to_sint16 (lor x y)].
    is_sint16 x -> is_sint16 y -> to_sint16 (lor x y) = lor x y

  axiom is_sint16_land : forall x y:int [to_sint16 (land x y)].
    is_sint16 x -> is_sint16 y -> to_sint16 (land x y) = land x y

  axiom is_sint16_lsr : forall x y:int [to_sint16 (lsr x y)].
    0<=y -> is_sint16 x -> to_sint16 (lsr x y) = lsr x y

  axiom is_sint16_lsl1 :
    lsl 1 15 = Cint.max_sint16

  axiom is_sint16_lsl1_inf : forall y:int [to_sint16 (lsl 1 y)].
    0<=y<15 -> to_sint16 (lsl 1 y) = (lsl 1 y)

  axiom is_sint16_lsl1_sup : forall y:int [to_sint16 (lsl 1 y)].
    16<=y -> to_sint16 (lsl 1 y) = 0

(** *** Cast to sint32 C type *)
  lemma is_sint32_lnot : forall x:int [to_sint32(lnot(x))].
    is_sint32 x -> to_sint32 (lnot x) = lnot x

  axiom is_sint32_lxor : forall x y:int [to_sint32 (lxor x y)].
    is_sint32 x ->  is_sint32 y -> to_sint32 (lxor x y) = lxor x y

  axiom is_sint32_lor : forall x y:int [to_sint32(lor x y)].
    is_sint32 x -> is_sint32 y -> to_sint32 (lor x y) = lor x y

  axiom is_sint32_land : forall x y:int [to_sint32 (land x y)].
    is_sint32 x -> is_sint32 y -> to_sint32 (land x y) = land x y

  axiom is_sint32_lsr : forall x y:int [to_sint32 (lsr x y)].
    0<=y -> is_sint32 x -> to_sint32 (lsr x y) = lsr x y

  axiom is_sint32_lsl1 :
    lsl 1 31 = Cint.max_sint32

  axiom is_sint32_lsl1_inf : forall y:int [to_sint32 (lsl 1 y)].
    0<=y<31 -> to_sint32 (lsl 1 y) = lsl 1 y

  axiom is_sint32_lsl1_sup : forall y:int [to_sint32 (lsl 1 y)].
    32<=y -> to_sint32 (lsl 1 y) = 0

(** *** Cast to sint64 C type *)
  lemma is_sint64_lnot : forall x:int [to_sint64 (lnot x)].
    is_sint64 x -> to_sint64 (lnot x) = lnot x

  axiom is_sint64_lxor : forall x y:int [to_sint64 (lxor x y)].
    is_sint64 x ->  is_sint64 y -> to_sint64 (lxor x y) = lxor x y

  axiom is_sint64_lor : forall x y:int [to_sint64(lor x y)].
    is_sint64 x -> is_sint64 y -> to_sint64 (lor x y) = lor x y

  axiom is_sint64_land : forall x y:int [to_sint64 (land x y)].
    is_sint64 x -> is_sint64 y -> to_sint64 (land x y) = land x y

  axiom is_sint64_lsr : forall x y:int [to_sint64 (lsr x y)].
    0<=y -> is_sint64 x -> to_sint64 (lsr x y) = lsr x y

  axiom is_sint64_lsl1 :
    lsl 1 63 = Cint.max_sint64

  axiom is_sint64_lsl1_inf : forall y:int [to_sint64 (lsl 1 y)].
    0<=y<63 -> to_sint64 (lsl 1 y) = lsl 1 y

  axiom is_sint64_lsl1_sup : forall y:int [to_sint64 (lsl 1 y)].
    64<=y -> to_sint64 (lsl 1 y) = 0

(** * Link between bitwise operators and addition *)
  axiom lor_addition : forall x y: int  [(land x y), (lor x y) ].
    land x y = 0 -> x + y = lor x y

  axiom lxor_addition : forall x y: int  [(land x y), (lxor x y) ].
    land x y = 0 -> x + y = lxor x y

end
