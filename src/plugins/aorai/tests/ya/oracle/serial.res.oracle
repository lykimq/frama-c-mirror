[kernel] Parsing serial.c (with preprocessing)
[eva] Analyzing a complete application starting at main
[eva:initial-state] Values of globals at initialization
  indefinitely ∈ [--..--]
  buffer[0..4] ∈ {0}
  n ∈ {0}
  aorai_x1 ∈ {0}
  aorai_x2 ∈ {0}
  aorai_y1 ∈ {0}
  aorai_y2 ∈ {0}
  aorai_CurOperation ∈ {op_output}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈ {Wait1}
  aorai_StatesHistory_1 ∈ {19}
  aorai_StatesHistory_2 ∈ {19}
[eva] using specification for function Frama_C_interval
[eva:partition] serial.c:58: starting to merge loop iterations
[eva:partition] serial.c:63: Trace partitioning superposing up to 100 states
[eva:partition] serial.c:63: Trace partitioning superposing up to 200 states
[eva:alarm] serial.c:33: Warning: 
  assertion 'Aorai,aorai_smoke_test' got status invalid (stopping propagation).
[aorai] serial.c:92: Wait1 <- Wait1 <- Complete
[aorai] serial.c:92: n in {5},x in [0..16383],y in [0..16383]
[eva:partition] serial.c:63: Trace partitioning superposing up to 400 states
[eva:partition] serial.c:63: Trace partitioning superposing up to 600 states
[eva:partition] serial.c:63: Trace partitioning superposing up to 800 states
[eva:partition] serial.c:63: Trace partitioning superposing up to 900 states
[eva:partition] serial.c:63: Trace partitioning superposing up to 1000 states
[eva:partition] serial.c:63: Trace partitioning superposing up to 1100 states
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function input_data_post_func:
  aorai_x1 ∈ [0..127]
  aorai_x2 ∈ [0..127]
  aorai_y1 ∈ [0..127]
  aorai_y2 ∈ [0..127]
  aorai_CurOperation ∈ {op_input_data}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {Complete; Wait1; Wait2; Wait3; Wait4; Wait5}
  aorai_StatesHistory_1 ∈ {1; 2; 3; 4; 5; 6}
  aorai_StatesHistory_2 ∈ {8; 9; 10; 11; 12; 13}
[eva:final-states] Values at end of function input_data_pre_func:
  aorai_CurOperation ∈ {op_input_data}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈
                 {DataReq1; DataReq2; DataReq3; DataReq4; DataReq5; DataReqE}
  aorai_StatesHistory_1 ∈ {8; 9; 10; 11; 12; 13}
  aorai_StatesHistory_2 ∈ {14; 15; 16; 17; 18}
[eva:final-states] Values at end of function input_data:
  Frama_C_entropy_source ∈ [--..--]
  aorai_x1 ∈ [0..127]
  aorai_x2 ∈ [0..127]
  aorai_y1 ∈ [0..127]
  aorai_y2 ∈ [0..127]
  aorai_CurOperation ∈ {op_input_data}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {Complete; Wait1; Wait2; Wait3; Wait4; Wait5}
  aorai_StatesHistory_1 ∈ {1; 2; 3; 4; 5; 6}
  aorai_StatesHistory_2 ∈ {8; 9; 10; 11; 12; 13}
[eva:final-states] Values at end of function input_status_post_func:
  aorai_CurOperation ∈ {op_input_status}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈
                 {StatusError; StatusOk1; StatusOk2; StatusOk3; StatusOk4;
                  StatusOk5; Wait1; Wait2; Wait3; Wait4; Wait5}
  aorai_StatesHistory_1 ∈ {14; 15; 16; 17; 18}
  aorai_StatesHistory_2 ∈ {0; 19; 20; 21; 22; 23}
[eva:final-states] Values at end of function input_status_pre_func:
  aorai_CurOperation ∈ {op_input_status}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈
                 {StatusReq1; StatusReq2; StatusReq3; StatusReq4; StatusReq5}
  aorai_StatesHistory_1 ∈ {0; 19; 20; 21; 22; 23}
  aorai_StatesHistory_2 ∈ [1..6] ∪ [14..19]
[eva:final-states] Values at end of function input_status:
  Frama_C_entropy_source ∈ [--..--]
  aorai_CurOperation ∈ {op_input_status}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈
                 {StatusError; StatusOk1; StatusOk2; StatusOk3; StatusOk4;
                  StatusOk5; Wait1; Wait2; Wait3; Wait4; Wait5}
  aorai_StatesHistory_1 ∈ {14; 15; 16; 17; 18}
  aorai_StatesHistory_2 ∈ {0; 19; 20; 21; 22; 23}
[eva:final-states] Values at end of function output_post_func:
  aorai_CurOperation ∈ {op_output}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {Wait1; aorai_reject}
  aorai_StatesHistory_1 ∈ {7; 19}
  aorai_StatesHistory_2 ∈ {0}
[eva:final-states] Values at end of function output_pre_func:
  aorai_CurOperation ∈ {op_output}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈ {Error; Wait1; aorai_reject}
  aorai_StatesHistory_1 ∈ {0}
  aorai_StatesHistory_2 ∈ {5}
[eva:final-states] Values at end of function output:
  aorai_CurOperation ∈ {op_output}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {Wait1}
  aorai_StatesHistory_1 ∈ {19}
  aorai_StatesHistory_2 ∈ {0}
[eva:final-states] Values at end of function read:
  Frama_C_entropy_source ∈ [--..--]
  s ∈ [0..255]
  status ∈ {0; 2; 4; 6; 8; 10; 12; 14} or UNINITIALIZED
  __retres ∈ [-1..255]
  aorai_x1 ∈ [0..127]
  aorai_x2 ∈ [0..127]
  aorai_y1 ∈ [0..127]
  aorai_y2 ∈ [0..127]
  aorai_CurOperation ∈ {op_input_status; op_input_data}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {Complete; Wait1; Wait2; Wait3; Wait4; Wait5}
  aorai_StatesHistory_1 ∈ [1..6] ∪ [14..18]
  aorai_StatesHistory_2 ∈ {0} ∪ [8..13] ∪ [19..23]
[eva:final-states] Values at end of function main:
  Frama_C_entropy_source ∈ [--..--]
  buffer[0] ∈ {0} ∪ [128..255]
        [1..4] ∈ [0..127]
  n ∈ {0; 1; 2; 3; 4}
  aorai_x1 ∈ [0..127]
  aorai_x2 ∈ [0..127]
  aorai_y1 ∈ [0..127]
  aorai_y2 ∈ [0..127]
  aorai_CurOperation ∈ {op_output; op_input_status; op_input_data}
  aorai_CurOpStatus ∈ {aorai_Called; aorai_Terminated}
  aorai_CurStates ∈ {Complete; Wait1; Wait2; Wait3; Wait4; Wait5}
  aorai_StatesHistory_1 ∈ [1..6] ∪ [14..19]
  aorai_StatesHistory_2 ∈ {0} ∪ [8..13] ∪ [19..23]
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  11 functions analyzed (out of 11): 100% coverage.
  In these functions, 273 statements reached (out of 339): 80% coverage.
  ----------------------------------------------------------------------------
  No errors or warnings raised during the analysis.
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  Evaluation of the logical properties reached by the analysis:
    Assertions        4 valid     2 unknown     0 invalid      6 total
    Preconditions     2 valid     0 unknown     0 invalid      2 total
  75% of the logical properties reached have been proven.
  ----------------------------------------------------------------------------
[kernel] Parsing TMPDIR/aorai_serial_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    Complete = 0,
    DataReq1 = 1,
    DataReq2 = 2,
    DataReq3 = 3,
    DataReq4 = 4,
    DataReq5 = 5,
    DataReqE = 6,
    Error = 7,
    StatusError = 8,
    StatusOk1 = 9,
    StatusOk2 = 10,
    StatusOk3 = 11,
    StatusOk4 = 12,
    StatusOk5 = 13,
    StatusReq1 = 14,
    StatusReq2 = 15,
    StatusReq3 = 16,
    StatusReq4 = 17,
    StatusReq5 = 18,
    Wait1 = 19,
    Wait2 = 20,
    Wait3 = 21,
    Wait4 = 22,
    Wait5 = 23,
    aorai_reject = 24
};
enum aorai_ListOper {
    op_input_data = 2,
    op_input_status = 1,
    op_output = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/* compiler builtin: 
   void Frama_C_show_aorai_state(...);   */
/*@ ghost extern int __fc_heap_status; */

/*@
axiomatic dynamic_allocation {
  predicate is_allocable{L}(ℤ n) 
    reads __fc_heap_status;
  
  axiom never_allocable{L}:
    ∀ ℤ i; i < 0 ∨ i > 18446744073709551615UL ⇒ ¬is_allocable(i);
  
  }
 */
extern int volatile Frama_C_entropy_source __attribute__((__unused__));

/*@ requires order: min ≤ max;
    ensures result_bounded: \old(min) ≤ \result ≤ \old(max);
    assigns \result, Frama_C_entropy_source;
    assigns \result \from min, max, Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
extern  __attribute__((__FC_BUILTIN__)) int Frama_C_interval(int min, int max);

int volatile indefinitely;
int buffer[5];
int n = 0;
/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@ ghost enum aorai_States aorai_CurStates = Wait1; */
/*@ ghost int aorai_StatesHistory_1 = Wait1; */
/*@ ghost int aorai_StatesHistory_2 = Wait1; */
/*@ ghost int aorai_x1 = 0; */
/*@ ghost int aorai_x2 = 0; */
/*@ ghost int aorai_y1 = 0; */
/*@ ghost int aorai_y2 = 0; */
/*@ ghost
  void input_status_pre_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_input_status;
    aorai_StatesHistory_2 = aorai_StatesHistory_1;
    aorai_StatesHistory_1 = (int)aorai_CurStates;
    if ((unsigned int)19 == aorai_CurStates) aorai_CurStates = StatusReq1;
    else 
      if ((unsigned int)9 == aorai_CurStates) aorai_CurStates = StatusReq1;
      else 
        if ((unsigned int)8 == aorai_CurStates) aorai_CurStates = StatusReq1;
        else 
          if ((unsigned int)0 == aorai_CurStates) aorai_CurStates = StatusReq1;
          else 
            if ((unsigned int)20 == aorai_CurStates) aorai_CurStates = StatusReq2;
            else 
              if ((unsigned int)10 == aorai_CurStates) aorai_CurStates = StatusReq2;
              else 
                if ((unsigned int)21 == aorai_CurStates) aorai_CurStates = StatusReq3;
                else 
                  if ((unsigned int)11 == aorai_CurStates) aorai_CurStates = StatusReq3;
                  else 
                    if ((unsigned int)22 == aorai_CurStates) aorai_CurStates = StatusReq4;
                    else 
                      if ((unsigned int)12 == aorai_CurStates) aorai_CurStates = StatusReq4;
                      else 
                        if ((unsigned int)23 == aorai_CurStates) aorai_CurStates = StatusReq5;
                        else 
                          if ((unsigned int)13 == aorai_CurStates) aorai_CurStates = StatusReq5;
                          else aorai_CurStates = aorai_reject;
    /@ assert Aorai: aorai_smoke_test: aorai_CurStates ≢ aorai_reject; @/
    ;
    return;
  }

*/

/*@ ghost
  void input_status_post_func(int res)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_input_status;
    aorai_StatesHistory_2 = aorai_StatesHistory_1;
    aorai_StatesHistory_1 = (int)aorai_CurStates;
    if ((unsigned int)18 == aorai_CurStates) {
      if ((res & 0b1111) != 1) {
        if ((res & 0b0001) != 0) aorai_CurStates = StatusError;
        else goto __aorai_label_12;
      }
      else goto __aorai_label_12;
    }
    else {
      __aorai_label_12: ;
      if ((unsigned int)17 == aorai_CurStates) {
        if ((res & 0b1111) != 1) {
          if ((res & 0b0001) != 0) aorai_CurStates = StatusError;
          else goto __aorai_label_11;
        }
        else goto __aorai_label_11;
      }
      else {
        __aorai_label_11: ;
        if ((unsigned int)16 == aorai_CurStates) {
          if ((res & 0b1111) != 1) {
            if ((res & 0b0001) != 0) aorai_CurStates = StatusError;
            else goto __aorai_label_10;
          }
          else goto __aorai_label_10;
        }
        else {
          __aorai_label_10: ;
          if ((unsigned int)15 == aorai_CurStates) {
            if ((res & 0b1111) != 1) {
              if ((res & 0b0001) != 0) aorai_CurStates = StatusError;
              else goto __aorai_label_9;
            }
            else goto __aorai_label_9;
          }
          else {
            __aorai_label_9: ;
            if ((unsigned int)14 == aorai_CurStates) {
              if ((res & 0b1111) != 1) {
                if ((res & 0b0001) != 0) aorai_CurStates = StatusError;
                else goto __aorai_label_8;
              }
              else goto __aorai_label_8;
            }
            else {
              __aorai_label_8: ;
              if ((unsigned int)14 == aorai_CurStates) {
                if ((res & 0b1111) == 1) aorai_CurStates = StatusOk1;
                else goto __aorai_label_7;
              }
              else {
                __aorai_label_7: ;
                if ((unsigned int)15 == aorai_CurStates) {
                  if ((res & 0b1111) == 1) aorai_CurStates = StatusOk2;
                  else goto __aorai_label_6;
                }
                else {
                  __aorai_label_6: ;
                  if ((unsigned int)16 == aorai_CurStates) {
                    if ((res & 0b1111) == 1) aorai_CurStates = StatusOk3;
                    else goto __aorai_label_5;
                  }
                  else {
                    __aorai_label_5: ;
                    if ((unsigned int)17 == aorai_CurStates) {
                      if ((res & 0b1111) == 1) aorai_CurStates = StatusOk4;
                      else goto __aorai_label_4;
                    }
                    else {
                      __aorai_label_4: ;
                      if ((unsigned int)18 == aorai_CurStates) {
                        if ((res & 0b1111) == 1) aorai_CurStates = StatusOk5;
                        else goto __aorai_label_3;
                      }
                      else {
                        __aorai_label_3: ;
                        if ((unsigned int)14 == aorai_CurStates) {
                          if ((res & 0b0001) == 0) aorai_CurStates = Wait1;
                          else goto __aorai_label_2;
                        }
                        else {
                          __aorai_label_2: ;
                          if ((unsigned int)15 == aorai_CurStates) {
                            if ((res & 0b0001) == 0) aorai_CurStates = Wait2;
                            else goto __aorai_label_1;
                          }
                          else {
                            __aorai_label_1: ;
                            if ((unsigned int)16 == aorai_CurStates) {
                              if ((res & 0b0001) == 0) aorai_CurStates = Wait3;
                              else goto __aorai_label_0;
                            }
                            else {
                              __aorai_label_0: ;
                              if ((unsigned int)17 == aorai_CurStates) {
                                if ((res & 0b0001) == 0) aorai_CurStates = Wait4;
                                else goto __aorai_label;
                              }
                              else {
                                __aorai_label: ;
                                if ((unsigned int)18 == aorai_CurStates) 
                                  if ((res & 0b0001) == 0) aorai_CurStates = Wait5;
                                  else aorai_CurStates = aorai_reject;
                                else aorai_CurStates = aorai_reject;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    /@ assert Aorai: aorai_smoke_test: aorai_CurStates ≢ aorai_reject; @/
    ;
    return;
  }

*/

/*@ ensures 0 ≤ \result < 0x100;
    assigns \result, Frama_C_entropy_source;
    assigns \result \from Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
int input_status(void)
{
  int tmp;
  /*@ ghost input_status_pre_func(); */
  tmp = Frama_C_interval(0x00,0xff);
  /*@ ghost input_status_post_func(tmp); */
  return tmp;
}

/*@ ghost
  void input_data_pre_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_input_data;
    aorai_StatesHistory_2 = aorai_StatesHistory_1;
    aorai_StatesHistory_1 = (int)aorai_CurStates;
    if ((unsigned int)9 == aorai_CurStates) aorai_CurStates = DataReq1;
    else 
      if ((unsigned int)10 == aorai_CurStates) aorai_CurStates = DataReq2;
      else 
        if ((unsigned int)11 == aorai_CurStates) aorai_CurStates = DataReq3;
        else 
          if ((unsigned int)12 == aorai_CurStates) aorai_CurStates = DataReq4;
          else 
            if ((unsigned int)13 == aorai_CurStates) aorai_CurStates = DataReq5;
            else 
              if ((unsigned int)8 == aorai_CurStates) aorai_CurStates = DataReqE;
              else 
                if ((unsigned int)23 == aorai_CurStates) aorai_CurStates = Error;
                else 
                  if ((unsigned int)22 == aorai_CurStates) aorai_CurStates = Error;
                  else 
                    if ((unsigned int)21 == aorai_CurStates) aorai_CurStates = Error;
                    else 
                      if ((unsigned int)20 == aorai_CurStates) aorai_CurStates = Error;
                      else 
                        if ((unsigned int)19 == aorai_CurStates) aorai_CurStates = Error;
                        else aorai_CurStates = aorai_reject;
    /@ assert Aorai: aorai_smoke_test: aorai_CurStates ≢ aorai_reject; @/
    ;
    return;
  }

*/

/*@ ghost
  void input_data_post_func(int res)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_input_data;
    aorai_StatesHistory_2 = aorai_StatesHistory_1;
    aorai_StatesHistory_1 = (int)aorai_CurStates;
    if ((unsigned int)5 == aorai_CurStates) {
      if ((res & 0b10000000) == 0b00000000) {
        aorai_CurStates = Complete;
        aorai_y2 = res;
      }
      else goto __aorai_label_26;
    }
    else 
      __aorai_label_26:
      if ((unsigned int)6 == aorai_CurStates) aorai_CurStates = Wait1;
      else 
        if ((unsigned int)5 == aorai_CurStates) {
          if ((res & 0b11000000) == 0b11000000) aorai_CurStates = Wait1;
          else goto __aorai_label_25;
        }
        else {
          __aorai_label_25: ;
          if ((unsigned int)4 == aorai_CurStates) {
            if ((res & 0b11000000) == 0b11000000) aorai_CurStates = Wait1;
            else goto __aorai_label_24;
          }
          else {
            __aorai_label_24: ;
            if ((unsigned int)3 == aorai_CurStates) {
              if ((res & 0b11000000) == 0b11000000) aorai_CurStates = Wait1;
              else goto __aorai_label_23;
            }
            else {
              __aorai_label_23: ;
              if ((unsigned int)2 == aorai_CurStates) {
                if ((res & 0b11000000) == 0b11000000) aorai_CurStates = Wait1;
                else goto __aorai_label_22;
              }
              else {
                __aorai_label_22: ;
                if ((unsigned int)1 == aorai_CurStates) {
                  if ((res & 0b10000000) == 0b00000000) aorai_CurStates = Wait1;
                  else goto __aorai_label_21;
                }
                else {
                  __aorai_label_21: ;
                  if ((unsigned int)1 == aorai_CurStates) {
                    if ((res & 0b11000000) == 0b11000000) aorai_CurStates = Wait1;
                    else goto __aorai_label_20;
                  }
                  else {
                    __aorai_label_20: ;
                    if ((unsigned int)5 == aorai_CurStates) {
                      if ((res & 0b11000000) == 0b10000000) aorai_CurStates = Wait2;
                      else goto __aorai_label_19;
                    }
                    else {
                      __aorai_label_19: ;
                      if ((unsigned int)4 == aorai_CurStates) {
                        if ((res & 0b11000000) == 0b10000000) aorai_CurStates = Wait2;
                        else goto __aorai_label_18;
                      }
                      else {
                        __aorai_label_18: ;
                        if ((unsigned int)3 == aorai_CurStates) {
                          if ((res & 0b11000000) == 0b10000000) aorai_CurStates = Wait2;
                          else goto __aorai_label_17;
                        }
                        else {
                          __aorai_label_17: ;
                          if ((unsigned int)2 == aorai_CurStates) {
                            if ((res & 0b11000000) == 0b10000000) aorai_CurStates = Wait2;
                            else goto __aorai_label_16;
                          }
                          else {
                            __aorai_label_16: ;
                            if ((unsigned int)1 == aorai_CurStates) {
                              if ((res & 0b11000000) == 0b10000000) aorai_CurStates = Wait2;
                              else goto __aorai_label_15;
                            }
                            else {
                              __aorai_label_15: ;
                              if ((unsigned int)2 == aorai_CurStates) {
                                if ((res & 0b10000000) == 0b00000000) {
                                  aorai_CurStates = Wait3;
                                  aorai_x1 = res;
                                }
                                else goto __aorai_label_14;
                              }
                              else {
                                __aorai_label_14: ;
                                if ((unsigned int)3 == aorai_CurStates) {
                                  if ((res & 0b10000000) == 0b00000000) {
                                    aorai_CurStates = Wait4;
                                    aorai_x2 = res;
                                  }
                                  else goto __aorai_label_13;
                                }
                                else {
                                  __aorai_label_13: ;
                                  if ((unsigned int)4 == aorai_CurStates) 
                                    if ((res & 0b10000000) == 0b00000000) {
                                      aorai_CurStates = Wait5;
                                      aorai_y1 = res;
                                    }
                                    else aorai_CurStates = aorai_reject;
                                  else aorai_CurStates = aorai_reject;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
    /@ assert Aorai: aorai_smoke_test: aorai_CurStates ≢ aorai_reject; @/
    ;
    return;
  }

*/

/*@ ensures 0 ≤ \result < 0x100;
    assigns \result, Frama_C_entropy_source;
    assigns \result \from Frama_C_entropy_source;
    assigns Frama_C_entropy_source \from Frama_C_entropy_source;
 */
int input_data(void)
{
  int tmp;
  /*@ ghost input_data_pre_func(); */
  tmp = Frama_C_interval(0x00,0xff);
  /*@ ghost input_data_post_func(tmp); */
  return tmp;
}

/*@ ghost
  void output_pre_func(int x, int y)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_output;
    aorai_StatesHistory_2 = aorai_StatesHistory_1;
    aorai_StatesHistory_1 = (int)aorai_CurStates;
    if ((unsigned int)23 == aorai_CurStates) aorai_CurStates = Error;
    else 
      if ((unsigned int)22 == aorai_CurStates) aorai_CurStates = Error;
      else 
        if ((unsigned int)21 == aorai_CurStates) aorai_CurStates = Error;
        else 
          if ((unsigned int)20 == aorai_CurStates) aorai_CurStates = Error;
          else 
            if ((unsigned int)19 == aorai_CurStates) aorai_CurStates = Error;
            else 
              if ((unsigned int)13 == aorai_CurStates) aorai_CurStates = Error;
              else 
                if ((unsigned int)12 == aorai_CurStates) aorai_CurStates = Error;
                else 
                  if ((unsigned int)11 == aorai_CurStates) aorai_CurStates = Error;
                  else 
                    if ((unsigned int)10 == aorai_CurStates) aorai_CurStates = Error;
                    else 
                      if ((unsigned int)9 == aorai_CurStates) aorai_CurStates = Error;
                      else 
                        if ((unsigned int)8 == aorai_CurStates) aorai_CurStates = Error;
                        else 
                          if ((unsigned int)0 == aorai_CurStates) {
                            if (y != aorai_y1 + 128 * aorai_y2) aorai_CurStates = Error;
                            else 
                              if (x != aorai_x1 + 128 * aorai_x2) aorai_CurStates = Error;
                              else goto __aorai_label_27;
                          }
                          else {
                            __aorai_label_27: ;
                            if ((unsigned int)0 == aorai_CurStates) 
                              if (x == aorai_x1 + 128 * aorai_x2) 
                                if (y == aorai_y1 + 128 * aorai_y2) aorai_CurStates = Wait1;
                                else aorai_CurStates = aorai_reject;
                              else aorai_CurStates = aorai_reject;
                            else aorai_CurStates = aorai_reject;
                          }
    /@ assert Aorai: aorai_smoke_test: aorai_CurStates ≢ aorai_reject; @/
    ;
    return;
  }

*/

/*@ ghost
  void output_post_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_output;
    aorai_StatesHistory_2 = aorai_StatesHistory_1;
    aorai_StatesHistory_1 = (int)aorai_CurStates;
    if ((unsigned int)19 == aorai_CurStates) aorai_CurStates = Wait1;
    else aorai_CurStates = aorai_reject;
    /@ assert Aorai: aorai_smoke_test: aorai_CurStates ≢ aorai_reject; @/
    ;
    return;
  }

*/

/*@ assigns \nothing; */
void output(int x, int y)
{
  /*@ ghost output_pre_func(x,y); */
  /*@ ghost output_post_func(); */
  return;
}

int read(int *status)
{
  int __retres;
  int s = input_status();
  if (s & 0x01) {
    int tmp_0;
    *status = s & 0x0e;
    tmp_0 = input_data();
    __retres = tmp_0;
    goto return_label;
  }
  __retres = -1;
  return_label: ;
  return __retres;
}

void main(void)
{
  /*@ ghost int aorai_Loop_Init_18; */
  while (indefinitely) {
    int status;
    int data = read(& status);
    if (data != -1) {
      int tmp_0;
      if (status != 0) {
        n = 0;
        continue;
      }
      if (data & 0x80) {
        if (n != 0) {
          n = 0;
          continue;
        }
        /*@ \eva::split data & 0x40; */ ;
      }
      else 
        if (n == 0) continue;
      tmp_0 = n;
      n ++;
      buffer[tmp_0] = data;
      if (n == 5) {
        if ((buffer[0] & 0x40) == 0) {
          int x = buffer[1] + 0x80 * buffer[2];
          int y = buffer[3] + 0x80 * buffer[4];
          output(x,y);
          Frama_C_show_aorai_state(n,x,y);
        }
        n = 0;
      }
    }
  }
  return;
}


