[kernel] Parsing floats.i (no preprocessing)
[kernel:parser:decimal-float] floats.i:8: Warning: 
  Floating-point constant 0.001 is not represented exactly. Will use 0x1.0624dd2f1a9fcp-10.
  (warn-once: no further messages from category 'parser:decimal-float' will be emitted)
[eva] Analyzing a complete application starting at main
[eva:initial-state] Values of globals at initialization
  aorai_CurOperation ∈ {op_square_root_aux}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈ {I}
[eva:recursion] floats.i:11: 
  detected recursive call of function square_root_aux.
[eva] floats.i:11: Warning: 
  Using specification of function square_root_aux for recursive calls.
  Analysis of function square_root_aux is thus incomplete and its soundness
  relies on the written specification.
[eva] using specification for function square_root_aux
[eva:assigns:missing] floats.i:6: Warning: 
  no \from part for clause
  'assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;'.
  Assuming \from \nothing so that the analysis can continue, but be aware this is probably incorrect.
[eva:alarm] <unknown location>: Warning: 
  function square_root_aux, behavior Buchi_property_behavior: postcondition got status unknown.
[eva:alarm] floats.i:11: Warning: 
  non-finite float value.
  assert \is_finite(tmp);
  (tmp from square_root_aux(y, n))
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main_post_func:
  aorai_CurOperation ∈ {op_main}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {E}
[eva:final-states] Values at end of function main_pre_func:
  aorai_CurOperation ∈ {op_main}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈ {A}
[eva:final-states] Values at end of function square_root_aux_post_func:
  aorai_CurOperation ∈ {op_square_root_aux}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {B}
[eva:final-states] Values at end of function square_root_aux_pre_func:
  aorai_CurOperation ∈ {op_square_root_aux}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈ {B}
[eva:final-states] Values at end of function square_root_post_func:
  aorai_CurOperation ∈ {op_square_root}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {C}
[eva:final-states] Values at end of function square_root_pre_func:
  aorai_CurOperation ∈ {op_square_root}
  aorai_CurOpStatus ∈ {aorai_Called}
  aorai_CurStates ∈ {B}
[eva:final-states] Values at end of function square_root_aux:
  y ∈ {1.5}
  __retres ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
  aorai_CurOperation ∈ {op_square_root_aux}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {B}
[eva:final-states] Values at end of function square_root:
  aorai_CurOperation ∈ {op_square_root}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {C}
[eva:final-states] Values at end of function main:
  r ∈ [-3.40282346639e+38 .. 3.40282346639e+38]
  aorai_CurOperation ∈ {op_main}
  aorai_CurOpStatus ∈ {aorai_Terminated}
  aorai_CurStates ∈ {E}
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  9 functions analyzed (out of 9): 100% coverage.
  In these functions, 53 statements reached (out of 67): 79% coverage.
  ----------------------------------------------------------------------------
  Some errors and warnings have been raised during the analysis:
    by the Eva analyzer:      0 errors    2 warnings
    by the Frama-C kernel:    0 errors    0 warnings
  ----------------------------------------------------------------------------
  1 alarm generated by the analysis:
       1 nan or infinite floating-point value
  ----------------------------------------------------------------------------
  Evaluation of the logical properties reached by the analysis:
    Assertions        0 valid     0 unknown     0 invalid      0 total
    Preconditions    10 valid     2 unknown     0 invalid     12 total
  83% of the logical properties reached have been proven.
  ----------------------------------------------------------------------------
[kernel] Parsing TMPDIR/aorai_floats_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    A = 0,
    B = 1,
    C = 2,
    E = 3,
    I = 4,
    aorai_reject = 5
};
enum aorai_ListOper {
    op_main = 2,
    op_square_root = 1,
    op_square_root_aux = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ check lemma aorai_reject_deterministic_trans{L}: \true;
 */
/*@ check lemma I_deterministic_trans{L}: \true;
 */
/*@ check lemma E_deterministic_trans{L}: \true;
 */
/*@ check lemma C_deterministic_trans{L}: \true;
 */
/*@ check lemma A_deterministic_trans{L}: \true;
 */
/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@
check lemma B_deterministic_trans{L}:
  (∀ float n, float x;
     ¬(\at(aorai_CurOperation,L) ≡ op_square_root_aux ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
        \at(aorai_CurOperation,L) ≡ op_square_root_aux ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Called ∧ x ≥ 1.0f ∧ 
        x ≤ n)) ∧
  (∀ float n, float x;
     ¬(\at(aorai_CurOperation,L) ≡ op_square_root ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
        \at(aorai_CurOperation,L) ≡ op_square_root_aux ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Called ∧ x ≥ 1.0f ∧ 
        x ≤ n)) ∧
  ¬(\at(aorai_CurOperation,L) ≡ op_square_root ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
     \at(aorai_CurOperation,L) ≡ op_square_root_aux ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated);
 */
/*@ ghost enum aorai_States aorai_CurStates = I; */
/*@ ghost
  /@ requires aorai_CurStates ≡ B;
     requires aorai_CurStates ≡ B ⇒ x ≥ 1.0f ∧ x ≤ n;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_square_root_aux;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates, n, x;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates, n, x;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates, n, x;
     
     behavior buch_state_A_out:
       ensures aorai_CurStates ≢ A;
     
     behavior buch_state_B_in:
       assumes aorai_CurStates ≡ B ∧ x ≥ 1.0f ∧ x ≤ n;
       ensures aorai_CurStates ≡ B;
     
     behavior buch_state_B_out:
       assumes aorai_CurStates ≢ B ∨ ¬(x ≥ 1.0f ∧ x ≤ n);
       ensures aorai_CurStates ≢ B;
     
     behavior buch_state_C_out:
       ensures aorai_CurStates ≢ C;
     
     behavior buch_state_E_out:
       ensures aorai_CurStates ≢ E;
     
     behavior buch_state_I_out:
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void square_root_aux_pre_func(float x, float n)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_square_root_aux;
    if ((unsigned int)1 == aorai_CurStates) 
      if (x >= 1.0f) 
        if (x <= n) aorai_CurStates = B; else aorai_CurStates = aorai_reject;
      else aorai_CurStates = aorai_reject;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ B;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_square_root_aux;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_A_out:
       ensures aorai_CurStates ≢ A;
     
     behavior buch_state_B_in:
       assumes aorai_CurStates ≡ B;
       ensures aorai_CurStates ≡ B;
     
     behavior buch_state_B_out:
       assumes aorai_CurStates ≢ B;
       ensures aorai_CurStates ≢ B;
     
     behavior buch_state_C_out:
       ensures aorai_CurStates ≢ C;
     
     behavior buch_state_E_out:
       ensures aorai_CurStates ≢ E;
     
     behavior buch_state_I_out:
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void square_root_aux_post_func(float res)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_square_root_aux;
    if ((unsigned int)1 == aorai_CurStates) aorai_CurStates = B;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ B;
    requires aorai_CurStates ≡ B ⇒ x ≥ 1.0f ∧ x ≤ n;
    assigns \result, aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
    assigns \result \from x, n;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ B;
 */
float square_root_aux(float x, float n)
{
  float __retres;
  /*@ ghost square_root_aux_pre_func(x,n); */
  float y = (x + n / x) / 2.0f;
  if ((double)(x - y) > 0.001) {
    __retres = y;
    goto return_label;
  }
  else {
    float tmp;
    tmp = square_root_aux(y,n);
    /*@ assert Eva: is_nan_or_infinite: \is_finite(tmp); */ ;
    __retres = tmp;
    goto return_label;
  }
  return_label:
  {
    /*@ ghost square_root_aux_post_func(__retres); */
    return __retres;
  }
}

/*@ ghost
  /@ requires aorai_CurStates ≡ A;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_square_root;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_A_out:
       ensures aorai_CurStates ≢ A;
     
     behavior buch_state_B_in:
       assumes aorai_CurStates ≡ A;
       ensures aorai_CurStates ≡ B;
     
     behavior buch_state_B_out:
       assumes aorai_CurStates ≢ A;
       ensures aorai_CurStates ≢ B;
     
     behavior buch_state_C_out:
       ensures aorai_CurStates ≢ C;
     
     behavior buch_state_E_out:
       ensures aorai_CurStates ≢ E;
     
     behavior buch_state_I_out:
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void square_root_pre_func(float n)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_square_root;
    if ((unsigned int)0 == aorai_CurStates) aorai_CurStates = B;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ B;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_square_root;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_A_out:
       ensures aorai_CurStates ≢ A;
     
     behavior buch_state_B_out:
       ensures aorai_CurStates ≢ B;
     
     behavior buch_state_C_in:
       assumes aorai_CurStates ≡ B;
       ensures aorai_CurStates ≡ C;
     
     behavior buch_state_C_out:
       assumes aorai_CurStates ≢ B;
       ensures aorai_CurStates ≢ C;
     
     behavior buch_state_E_out:
       ensures aorai_CurStates ≢ E;
     
     behavior buch_state_I_out:
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void square_root_post_func(float res)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_square_root;
    if ((unsigned int)1 == aorai_CurStates) aorai_CurStates = C;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ A;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ C;
 */
float square_root(float n)
{
  float tmp;
  /*@ ghost square_root_pre_func(n); */
  tmp = square_root_aux((float)1.0,n);
  /*@ ghost square_root_post_func(tmp); */
  return tmp;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ I;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_A_in:
       assumes aorai_CurStates ≡ I;
       ensures aorai_CurStates ≡ A;
     
     behavior buch_state_A_out:
       assumes aorai_CurStates ≢ I;
       ensures aorai_CurStates ≢ A;
     
     behavior buch_state_B_out:
       ensures aorai_CurStates ≢ B;
     
     behavior buch_state_C_out:
       ensures aorai_CurStates ≢ C;
     
     behavior buch_state_E_out:
       ensures aorai_CurStates ≢ E;
     
     behavior buch_state_I_out:
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void main_pre_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    if ((unsigned int)4 == aorai_CurStates) aorai_CurStates = A;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ C;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_A_out:
       ensures aorai_CurStates ≢ A;
     
     behavior buch_state_B_out:
       ensures aorai_CurStates ≢ B;
     
     behavior buch_state_C_out:
       ensures aorai_CurStates ≢ C;
     
     behavior buch_state_E_in:
       assumes aorai_CurStates ≡ C;
       ensures aorai_CurStates ≡ E;
     
     behavior buch_state_E_out:
       assumes aorai_CurStates ≢ C;
       ensures aorai_CurStates ≢ E;
     
     behavior buch_state_I_out:
       ensures aorai_CurStates ≢ I;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
   @/
  void main_post_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    if ((unsigned int)2 == aorai_CurStates) aorai_CurStates = E;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ I;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ E;
 */
void main(void)
{
  /*@ ghost main_pre_func(); */
  float r = square_root(2.0f);
  /*@ ghost main_post_func(); */
  return;
}


