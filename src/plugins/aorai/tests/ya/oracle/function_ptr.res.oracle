[kernel] Parsing function_ptr.i (no preprocessing)
[kernel] Parsing TMPDIR/aorai_function_ptr_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    aorai_intermediate_state = 0,
    aorai_intermediate_state_0 = 1,
    aorai_intermediate_state_1 = 2,
    aorai_intermediate_state_2 = 3,
    aorai_reject = 4,
    f_called = 5,
    g_called = 6,
    i = 7,
    ok = 8,
    s1 = 9
};
enum aorai_ListOper {
    op_f = 2,
    op_g = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ check lemma ok_deterministic_trans{L}: \true;
 */
/*@ check lemma i_deterministic_trans{L}: \true;
 */
/*@ check lemma g_called_deterministic_trans{L}: \true;
 */
/*@ check lemma f_called_deterministic_trans{L}: \true;
 */
/*@ check lemma aorai_reject_deterministic_trans{L}: \true;
 */
/*@ check lemma aorai_intermediate_state_2_deterministic_trans{L}: \true;
 */
/*@ check lemma aorai_intermediate_state_1_deterministic_trans{L}: \true;
 */
void (*pf)(void);
int X;
void f(void);

void g(void);

/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@
check lemma s1_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_g ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Called ∧
     \at(aorai_CurOperation,L) ≡ op_f ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Called);
 */
/*@
check lemma aorai_intermediate_state_0_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_g ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
     ¬(\at(aorai_CurOperation,L) ≡ op_g ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated));
 */
/*@
check lemma aorai_intermediate_state_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_f ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
     ¬(\at(aorai_CurOperation,L) ≡ op_f ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated));
 */
/*@ ghost enum aorai_States aorai_CurStates = i; */
/*@ ghost
  /@ requires aorai_CurStates ≡ g_called ∨ aorai_CurStates ≡ s1;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_in:
       assumes aorai_CurStates ≡ s1;
       ensures aorai_CurStates ≡ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_out:
       assumes aorai_CurStates ≢ s1;
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_2_in:
       assumes aorai_CurStates ≡ g_called;
       ensures aorai_CurStates ≡ aorai_intermediate_state_2;
     
     behavior buch_state_aorai_intermediate_state_2_out:
       assumes aorai_CurStates ≢ g_called;
       ensures aorai_CurStates ≢ aorai_intermediate_state_2;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_f_called_out:
       ensures aorai_CurStates ≢ f_called;
     
     behavior buch_state_g_called_out:
       ensures aorai_CurStates ≢ g_called;
     
     behavior buch_state_i_out:
       ensures aorai_CurStates ≢ i;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
     
     behavior buch_state_s1_out:
       ensures aorai_CurStates ≢ s1;
   @/
  void f_pre_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_f;
    if ((unsigned int)9 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state;
    else 
      if ((unsigned int)6 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state_2;
      else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires
       aorai_CurStates ≡ aorai_intermediate_state ∨
       aorai_CurStates ≡ aorai_intermediate_state_2;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_f;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_2_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_2;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_f_called_in:
       assumes aorai_CurStates ≡ aorai_intermediate_state;
       ensures aorai_CurStates ≡ f_called;
     
     behavior buch_state_f_called_out:
       assumes aorai_CurStates ≢ aorai_intermediate_state;
       ensures aorai_CurStates ≢ f_called;
     
     behavior buch_state_g_called_out:
       ensures aorai_CurStates ≢ g_called;
     
     behavior buch_state_i_out:
       ensures aorai_CurStates ≢ i;
     
     behavior buch_state_ok_in:
       assumes aorai_CurStates ≡ aorai_intermediate_state_2;
       ensures aorai_CurStates ≡ ok;
     
     behavior buch_state_ok_out:
       assumes aorai_CurStates ≢ aorai_intermediate_state_2;
       ensures aorai_CurStates ≢ ok;
     
     behavior buch_state_s1_out:
       ensures aorai_CurStates ≢ s1;
   @/
  void f_post_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_f;
    if ((unsigned int)0 == aorai_CurStates) aorai_CurStates = f_called;
    else 
      if ((unsigned int)3 == aorai_CurStates) aorai_CurStates = ok;
      else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ g_called ∨ aorai_CurStates ≡ s1;
    requires aorai_CurStates ≡ s1 ∨ aorai_CurStates ≢ s1;
    requires aorai_CurStates ≡ g_called ∨ aorai_CurStates ≢ g_called;
    
    behavior Buchi_behavior_in_1:
      assumes aorai_CurStates ≡ g_called;
      ensures aorai_CurStates ≡ ok;
    
    behavior Buchi_behavior_in_0:
      assumes aorai_CurStates ≡ s1;
      ensures aorai_CurStates ≡ f_called;
 */
void f(void)
{
  /*@ ghost f_pre_func(); */
  X ++;
  /*@ ghost f_post_func(); */
  return;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ f_called ∨ aorai_CurStates ≡ s1;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_g;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_in:
       assumes aorai_CurStates ≡ s1;
       ensures aorai_CurStates ≡ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       assumes aorai_CurStates ≢ s1;
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_in:
       assumes aorai_CurStates ≡ f_called;
       ensures aorai_CurStates ≡ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       assumes aorai_CurStates ≢ f_called;
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_2_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_2;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_f_called_out:
       ensures aorai_CurStates ≢ f_called;
     
     behavior buch_state_g_called_out:
       ensures aorai_CurStates ≢ g_called;
     
     behavior buch_state_i_out:
       ensures aorai_CurStates ≢ i;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
     
     behavior buch_state_s1_out:
       ensures aorai_CurStates ≢ s1;
   @/
  void g_pre_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_g;
    if ((unsigned int)9 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state_0;
    else 
      if ((unsigned int)5 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state_1;
      else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires
       aorai_CurStates ≡ aorai_intermediate_state_0 ∨
       aorai_CurStates ≡ aorai_intermediate_state_1;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_g;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_2_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_2;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_f_called_out:
       ensures aorai_CurStates ≢ f_called;
     
     behavior buch_state_g_called_in:
       assumes aorai_CurStates ≡ aorai_intermediate_state_0;
       ensures aorai_CurStates ≡ g_called;
     
     behavior buch_state_g_called_out:
       assumes aorai_CurStates ≢ aorai_intermediate_state_0;
       ensures aorai_CurStates ≢ g_called;
     
     behavior buch_state_i_out:
       ensures aorai_CurStates ≢ i;
     
     behavior buch_state_ok_in:
       assumes aorai_CurStates ≡ aorai_intermediate_state_1;
       ensures aorai_CurStates ≡ ok;
     
     behavior buch_state_ok_out:
       assumes aorai_CurStates ≢ aorai_intermediate_state_1;
       ensures aorai_CurStates ≢ ok;
     
     behavior buch_state_s1_out:
       ensures aorai_CurStates ≢ s1;
   @/
  void g_post_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_g;
    if ((unsigned int)1 == aorai_CurStates) aorai_CurStates = g_called;
    else 
      if ((unsigned int)2 == aorai_CurStates) aorai_CurStates = ok;
      else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ f_called ∨ aorai_CurStates ≡ s1;
    requires aorai_CurStates ≡ s1 ∨ aorai_CurStates ≢ s1;
    requires aorai_CurStates ≡ f_called ∨ aorai_CurStates ≢ f_called;
    
    behavior Buchi_behavior_in_1:
      assumes aorai_CurStates ≡ f_called;
      ensures aorai_CurStates ≡ ok;
    
    behavior Buchi_behavior_in_0:
      assumes aorai_CurStates ≡ s1;
      ensures aorai_CurStates ≡ g_called;
 */
void g(void)
{
  /*@ ghost g_pre_func(); */
  X --;
  /*@ ghost g_post_func(); */
  return;
}

/*@ ghost
  /@ requires aorai_CurStates ≡ i;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_2_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_2;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_f_called_out:
       ensures aorai_CurStates ≢ f_called;
     
     behavior buch_state_g_called_out:
       ensures aorai_CurStates ≢ g_called;
     
     behavior buch_state_i_out:
       ensures aorai_CurStates ≢ i;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
     
     behavior buch_state_s1_in:
       assumes aorai_CurStates ≡ i;
       ensures aorai_CurStates ≡ s1;
     
     behavior buch_state_s1_out:
       assumes aorai_CurStates ≢ i;
       ensures aorai_CurStates ≢ s1;
   @/
  void main_pre_func(int c)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    if ((unsigned int)7 == aorai_CurStates) aorai_CurStates = s1;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ ok;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_2_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_2;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_f_called_out:
       ensures aorai_CurStates ≢ f_called;
     
     behavior buch_state_g_called_out:
       ensures aorai_CurStates ≢ g_called;
     
     behavior buch_state_i_out:
       ensures aorai_CurStates ≢ i;
     
     behavior buch_state_ok_in:
       assumes aorai_CurStates ≡ ok;
       ensures aorai_CurStates ≡ ok;
     
     behavior buch_state_ok_out:
       assumes aorai_CurStates ≢ ok;
       ensures aorai_CurStates ≢ ok;
     
     behavior buch_state_s1_out:
       ensures aorai_CurStates ≢ s1;
   @/
  void main_post_func(int res)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    if ((unsigned int)8 == aorai_CurStates) aorai_CurStates = ok;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ i;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ ok;
 */
int main(int c)
{
  int __retres;
  /*@ ghost main_pre_func(c); */
  if (c) pf = & f; else pf = & g;
  /*@ calls f, g; */
  (*pf)();
  if (c) pf = & g; else pf = & f;
  /*@ calls f, g; */
  (*pf)();
  __retres = 0;
  /*@ ghost main_post_func(__retres); */
  return __retres;
}


