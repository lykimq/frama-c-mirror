[kernel] Parsing seq_unlimited.i (no preprocessing)
[kernel] Parsing TMPDIR/aorai_seq_unlimited_0.i (no preprocessing)
/* Generated by Frama-C */
enum aorai_States {
    aorai_intermediate_state = 0,
    aorai_intermediate_state_0 = 1,
    aorai_intermediate_state_1 = 2,
    aorai_reject = 3,
    b = 4,
    c = 5,
    fst = 6,
    ok = 7
};
enum aorai_ListOper {
    op_find = 2,
    op_init = 1,
    op_main = 0
};
enum aorai_OpStatusList {
    aorai_Terminated = 1,
    aorai_Called = 0
};
/*@ check lemma ok_deterministic_trans{L}: \true;
 */
/*@ check lemma fst_deterministic_trans{L}: \true;
 */
/*@ check lemma c_deterministic_trans{L}: \true;
 */
/*@ check lemma b_deterministic_trans{L}: \true;
 */
/*@ check lemma aorai_reject_deterministic_trans{L}: \true;
 */
/*@ check lemma aorai_intermediate_state_deterministic_trans{L}: \true;
 */
/*@ ghost enum aorai_ListOper aorai_CurOperation; */
/*@ ghost enum aorai_OpStatusList aorai_CurOpStatus; */
/*@
check lemma aorai_intermediate_state_1_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_find ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated ∧
     ¬(\at(aorai_CurOperation,L) ≡ op_find ∧
        \at(aorai_CurOpStatus,L) ≡ aorai_Terminated));
 */
/*@
check lemma aorai_intermediate_state_0_deterministic_trans{L}:
  ¬(\at(aorai_CurOperation,L) ≡ op_find ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Called ∧
     \at(aorai_CurOperation,L) ≡ op_main ∧
     \at(aorai_CurOpStatus,L) ≡ aorai_Terminated);
 */
/*@ ghost enum aorai_States aorai_CurStates = fst; */
/*@ ghost
  /@ requires aorai_CurStates ≡ b;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_init;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_in:
       assumes aorai_CurStates ≡ b;
       ensures aorai_CurStates ≡ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_out:
       assumes aorai_CurStates ≢ b;
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_fst_out:
       ensures aorai_CurStates ≢ fst;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
   @/
  void init_pre_func(int *a, int n)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_init;
    if ((unsigned int)4 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ aorai_intermediate_state;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_init;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_in:
       assumes aorai_CurStates ≡ aorai_intermediate_state;
       ensures aorai_CurStates ≡ c;
     
     behavior buch_state_c_out:
       assumes aorai_CurStates ≢ aorai_intermediate_state;
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_fst_out:
       ensures aorai_CurStates ≢ fst;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
   @/
  void init_post_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_init;
    if ((unsigned int)0 == aorai_CurStates) aorai_CurStates = c;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ b;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ c;
 */
void init(int *a, int n)
{
  /*@ ghost int aorai_Loop_Init_2; */
  /*@ ghost init_pre_func(a,n); */
  int i = 0;
  /*@ ghost aorai_Loop_Init_2 = 1; */
  aorai_loop_2:
  /*@ loop invariant Aorai: aorai_CurStates ≡ aorai_intermediate_state;
      loop invariant Aorai: aorai_CurStates ≢ aorai_intermediate_state_0;
      loop invariant Aorai: aorai_CurStates ≢ aorai_intermediate_state_1;
      loop invariant Aorai: aorai_CurStates ≢ aorai_reject;
      loop invariant Aorai: aorai_CurStates ≢ b;
      loop invariant Aorai: aorai_CurStates ≢ c;
      loop invariant Aorai: aorai_CurStates ≢ fst;
      loop invariant Aorai: aorai_CurStates ≢ ok;
  */
  while (i < n) {
    /*@ ghost aorai_Loop_Init_2 = 0; */
    *(a + i) = i;
    i ++;
  }
  /*@ ghost init_post_func(); */
  return;
}

/*@ ghost
  /@ requires
       aorai_CurStates ≡ aorai_intermediate_state_0 ∨
       aorai_CurStates ≡ c;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_find;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_in:
       assumes
         aorai_CurStates ≡ c ∨
         aorai_CurStates ≡ aorai_intermediate_state_0;
       ensures aorai_CurStates ≡ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       assumes
         aorai_CurStates ≢ c ∧
         aorai_CurStates ≢ aorai_intermediate_state_0;
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_fst_out:
       ensures aorai_CurStates ≢ fst;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
   @/
  void find_pre_func(int *a, int n, int k)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_find;
    if ((unsigned int)5 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state_1;
    else 
      if ((unsigned int)1 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state_1;
      else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ aorai_intermediate_state_1;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_find;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_in:
       assumes aorai_CurStates ≡ aorai_intermediate_state_1;
       ensures aorai_CurStates ≡ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       assumes aorai_CurStates ≢ aorai_intermediate_state_1;
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_fst_out:
       ensures aorai_CurStates ≢ fst;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
   @/
  void find_post_func(int res)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_find;
    if ((unsigned int)2 == aorai_CurStates) aorai_CurStates = aorai_intermediate_state_0;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires
      aorai_CurStates ≡ aorai_intermediate_state_0 ∨
      aorai_CurStates ≡ c;
    requires aorai_CurStates ≡ c ∨ aorai_CurStates ≢ c;
    requires
      aorai_CurStates ≡ aorai_intermediate_state_0 ∨
      aorai_CurStates ≢ aorai_intermediate_state_0;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ aorai_intermediate_state_0;
 */
int find(int *a, int n, int k)
{
  int __retres;
  /*@ ghost find_pre_func(a,n,k); */
  {
    /*@ ghost int aorai_Loop_Init_12; */
    int i = 0;
    /*@ ghost aorai_Loop_Init_12 = 1; */
    aorai_loop_12:
    /*@ loop invariant Aorai: aorai_CurStates ≢ aorai_intermediate_state;
        loop invariant Aorai: aorai_CurStates ≢ aorai_intermediate_state_0;
        loop invariant Aorai: aorai_CurStates ≡ aorai_intermediate_state_1;
        loop invariant Aorai: aorai_CurStates ≢ aorai_reject;
        loop invariant Aorai: aorai_CurStates ≢ b;
        loop invariant Aorai: aorai_CurStates ≢ c;
        loop invariant Aorai: aorai_CurStates ≢ fst;
        loop invariant Aorai: aorai_CurStates ≢ ok;
        loop invariant
          Aorai:
            aorai_Loop_Init_12 ≢ 0 ⇒
            \at(aorai_CurStates ≢ aorai_intermediate_state_0,Pre) ∧
            \at(aorai_CurStates ≢ c,Pre) ⇒
            aorai_CurStates ≢ aorai_intermediate_state_1;
    */
    while (i < n) {
      /*@ ghost aorai_Loop_Init_12 = 0; */
      if (*(a + i) == k) {
        __retres = i;
        goto return_label;
      }
      i ++;
    }
  }
  __retres = -1;
  return_label: {
                  /*@ ghost find_post_func(__retres); */
                  return __retres;
                }
}

/*@ ghost
  /@ requires aorai_CurStates ≡ fst;
     ensures aorai_CurOpStatus ≡ aorai_Called;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_in:
       assumes aorai_CurStates ≡ fst;
       ensures aorai_CurStates ≡ b;
     
     behavior buch_state_b_out:
       assumes aorai_CurStates ≢ fst;
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_fst_out:
       ensures aorai_CurStates ≢ fst;
     
     behavior buch_state_ok_out:
       ensures aorai_CurStates ≢ ok;
   @/
  void main_pre_func(void)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Called;
    aorai_CurOperation = op_main;
    if ((unsigned int)6 == aorai_CurStates) aorai_CurStates = b;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ ghost
  /@ requires aorai_CurStates ≡ aorai_intermediate_state_0;
     ensures aorai_CurOpStatus ≡ aorai_Terminated;
     ensures aorai_CurOperation ≡ op_main;
     assigns aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOpStatus
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurOperation
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     assigns aorai_CurStates
       \from aorai_CurOpStatus, aorai_CurOperation, aorai_CurStates;
     
     behavior buch_state_aorai_intermediate_state_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state;
     
     behavior buch_state_aorai_intermediate_state_0_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_0;
     
     behavior buch_state_aorai_intermediate_state_1_out:
       ensures aorai_CurStates ≢ aorai_intermediate_state_1;
     
     behavior buch_state_aorai_reject_out:
       ensures aorai_CurStates ≢ aorai_reject;
     
     behavior buch_state_b_out:
       ensures aorai_CurStates ≢ b;
     
     behavior buch_state_c_out:
       ensures aorai_CurStates ≢ c;
     
     behavior buch_state_fst_out:
       ensures aorai_CurStates ≢ fst;
     
     behavior buch_state_ok_in:
       assumes aorai_CurStates ≡ aorai_intermediate_state_0;
       ensures aorai_CurStates ≡ ok;
     
     behavior buch_state_ok_out:
       assumes aorai_CurStates ≢ aorai_intermediate_state_0;
       ensures aorai_CurStates ≢ ok;
   @/
  void main_post_func(int res)
  {
    /@ \eva::slevel full; @/
    ;
    aorai_CurOpStatus = aorai_Terminated;
    aorai_CurOperation = op_main;
    if ((unsigned int)1 == aorai_CurStates) aorai_CurStates = ok;
    else aorai_CurStates = aorai_reject;
    return;
  }

*/

/*@ requires aorai_CurStates ≡ fst;
    
    behavior aorai_acceptance:
      ensures aorai_CurStates ≡ ok;
    
    behavior Buchi_property_behavior:
      ensures aorai_CurStates ≡ ok;
 */
int main(void)
{
  int __retres;
  int a[10];
  int tmp_0;
  /*@ ghost main_pre_func(); */
  init(a,10);
  tmp_0 = find(a,10,5);
  if (tmp_0) {
    int tmp;
    tmp = find(a,10,11);
    __retres = tmp;
    goto return_label;
  }
  __retres = 0;
  return_label: {
                  /*@ ghost main_post_func(__retres); */
                  return __retres;
                }
}


