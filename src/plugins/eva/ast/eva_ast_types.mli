(**************************************************************************)
(*                                                                        *)
(*  This file is part of Frama-C.                                         *)
(*                                                                        *)
(*  Copyright (C) 2007-2025                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(** Types definition of the Eva AST for lvalues and expressions.
    Should also include ACSL terms and predicates in the future.
    Most types are similar to {!Cil_types}. *)

type origin =
  | Lval of Cil_types.lval
  | Exp of Cil_types.exp
  | Term of Cil_types.identified_term
  | Built (* Not present in the original source code *)

type 'a tag = private {
  node: 'a;
  typ: Cil_types.typ;
  origin: origin;
}

type typ = Cil_types.typ
type varinfo = Cil_types.varinfo

type exp = exp_node tag

and exp_node =
  | Const      of constant
  | Lval       of lval
  | UnOp       of unop * exp * typ
  | BinOp      of binop * exp * exp * typ
  | CastE      of typ * exp
  | AddrOf     of lval
  | StartOf    of lval

(** Constants *)
and constant =
  | CTopInt of ikind (* an unknown integer; currently introduced when
                        sizeof/alignof cannot be evaluated as a constant *)
  | CInt64 of Integer.t * ikind * string option
  | CString of Base.t (* the base must be [Base.String _] *)
  | CChr of char
  | CReal of float * fkind * string option
  | CEnum of Cil_types.enumitem * exp (* the translated expression that this enumitem refers to *)

and lval = lval_node tag

and lval_node = lhost * offset

and lhost =
  | Var of varinfo
  | Mem of exp

and offset =
  | NoOffset
  | Field of Cil_types.fieldinfo * offset
  | Index of exp * offset

and ikind = Cil_types.ikind
and fkind = Cil_types.fkind

and unop = Neg | BNot | LNot

and binop =
  | PlusA
  | PlusPI
  | MinusA
  | MinusPI
  | MinusPP
  | Mult
  | Div
  | Mod
  | Shiftlt
  | Shiftrt
  | Lt
  | Gt
  | Le
  | Ge
  | Eq
  | Ne
  | BAnd
  | BXor
  | BOr
  | LAnd
  | LOr

type init =
  | SingleInit of (exp * Cil_types.location)
  | CompoundInit of typ * (offset * init) list


(** Structural comparaison and equality functions, generated by ppx deriving.
    Equivalent to the functions provided by {!Cil_datatype.ConstantStrict}
    and {!Cil_datatype.ExpStructEqStrict}. *)

val compare_constant: constant -> constant -> int
val equal_constant: constant -> constant -> bool
val compare_exp: exp -> exp -> int
val equal_exp: exp -> exp -> bool
val compare_lval: lval -> lval -> int
val equal_lval: lval -> lval -> bool
val compare_lhost: lhost -> lhost -> int
val equal_lhost: lhost -> lhost -> bool
val compare_offset: offset -> offset -> int
val equal_offset: offset -> offset -> bool

(** Tag builder for {!Eva_ast_builder} only. *)
val mk_tag: node: 'a -> typ: Cil_types.typ -> origin: origin -> 'a tag
[@@alert eva_ast_builder
    "For internal use only; use mk_exp and mk_lval builders instead."]
