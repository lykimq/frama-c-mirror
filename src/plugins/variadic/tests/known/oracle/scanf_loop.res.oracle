[variadic] FRAMAC_SHARE/libc/stdio.h:244: 
  Declaration of variadic function fprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:246: 
  Declaration of variadic function fscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:248: 
  Declaration of variadic function printf.
[variadic] FRAMAC_SHARE/libc/stdio.h:249: 
  Declaration of variadic function scanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:250: 
  Declaration of variadic function snprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:252: 
  Declaration of variadic function sprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:254: 
  Declaration of variadic function sscanf.
[variadic] FRAMAC_SHARE/libc/stdio.h:587: 
  Declaration of variadic function dprintf.
[variadic] FRAMAC_SHARE/libc/stdio.h:649: 
  Declaration of variadic function asprintf.
[variadic] scanf_loop.c:6: 
  Translating call to scanf to a call to the specialized version scanf_va_1.
[eva] Analyzing a complete application starting at main
[eva] using specification for function scanf
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main:
  n âˆˆ [--..--]
  S___fc_stdin[0..1] âˆˆ [--..--]
/* Generated by Frama-C */
#include "errno.h"
#include "stdarg.h"
#include "stddef.h"
#include "stdio.h"
int volatile nondet;
/*@ requires \valid(param0);
    requires valid_read_string(format);
    ensures \initialized(param0);
    assigns \result, __fc_stdin->__fc_FILE_data, *param0;
    assigns \result
      \from (indirect: __fc_stdin->__fc_FILE_id),
            (indirect: __fc_stdin->__fc_FILE_data),
            (indirect: *(format + (0 ..)));
    assigns __fc_stdin->__fc_FILE_data
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
    assigns *param0
      \from (indirect: __fc_stdin->__fc_FILE_id), __fc_stdin->__fc_FILE_data,
            (indirect: *(format + (0 ..)));
 */
int scanf_va_1(char const * restrict format, int *param0);

int main(void)
{
  int n;
  while (1) {
    int tmp;
    tmp = scanf("%d",& n); /* scanf_va_1 */
    if (! (tmp > 0)) break;
    if (nondet) break;
  }
  return n;
}


