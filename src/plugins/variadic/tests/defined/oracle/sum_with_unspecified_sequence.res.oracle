[variadic] sum_with_unspecified_sequence.c:8: 
  Declaration of variadic function sum.
[eva] Analyzing a complete application starting at sum
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  out of bounds read. assert \valid_read(list);
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  out of bounds read. assert \valid_read((int *)*list);
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  signed overflow.
  assert -2147483648 ≤ ret + tmp_unfold_5;
  (tmp_unfold_5 from vararg)
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  signed overflow.
  assert ret + tmp_unfold_5 ≤ 2147483647;
  (tmp_unfold_5 from vararg)
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  out of bounds read. assert \valid_read(list);
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  out of bounds read. assert \valid_read((int *)*list);
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  signed overflow. assert -2147483648 ≤ ret + tmp;
                   (tmp from vararg)
[eva:alarm] sum_with_unspecified_sequence.c:14: Warning: 
  signed overflow. assert ret + tmp ≤ 2147483647;
                   (tmp from vararg)
[eva:garbled-mix:summary] 
  Origins of garbled mix generated during analysis:
    Initial state (read in 3 statements, propagated through 3 statements)
      garbled mix of &{S_0_S___va_params; S_1_S___va_params}
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function sum:
  ret ∈
     {{ garbled mix of &{S_0_S___va_params; S_1_S___va_params}
      (origin: Well) }}
  i ∈ {0; 1; 2}
  list ∈ {{ NULL ; &S___va_params{[0], [1], [2]} }}
/* Generated by Frama-C */
#include "stdarg.h"
int sum(int n, void * const *__va_params)
{
  int i;
  va_list list;
  int ret = 0;
  list = __va_params;
  i = 0;
  if (! (i < n)) goto unfolding_2_loop;
  {
    int tmp_unfold_5;
    /*@ assert Eva: mem_access: \valid_read(list); */
    /*@ assert Eva: mem_access: \valid_read((int *)*list); */
    tmp_unfold_5 = *((int *)*list);
    list ++;
    /*@ assert Eva: signed_overflow: -2147483648 ≤ ret + tmp_unfold_5; */
    /*@ assert Eva: signed_overflow: ret + tmp_unfold_5 ≤ 2147483647; */
    ret += tmp_unfold_5;
  }
  i ++;
  unfolding_3_loop: ;
  /*@ loop unfold "done", 1; */
  while (i < n) {
    {
      int tmp;
      /*@ assert Eva: mem_access: \valid_read(list); */
      /*@ assert Eva: mem_access: \valid_read((int *)*list); */
      tmp = *((int *)*list);
      list ++;
      /*@ assert Eva: signed_overflow: -2147483648 ≤ ret + tmp; */
      /*@ assert Eva: signed_overflow: ret + tmp ≤ 2147483647; */
      ret += tmp;
    }
    i ++;
  }
  unfolding_2_loop: ;
  return ret;
}


