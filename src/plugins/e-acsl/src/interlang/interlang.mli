(**************************************************************************)
(*                                                                        *)
(*  This file is part of the Frama-C's E-ACSL plug-in.                    *)
(*                                                                        *)
(*  Copyright (C) 2012-2025                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(** The compilation of E-ACSL to Cil is implemented as a two-stage process,
    where E-ACSL is first translated into an intermediate language {!Interlang}
    and only then into Cil. This module defines the E-ACSL intermediate
    language type, along with pretty printing functions.

    This language is currently subject to frequent modifications, so
    documentation remains scant for the moment.

    Since it is an intermediate language betwen E-ACSL and Cil its
    characteristics are situated somewhere between the two languages,
    i.e. Interlang expressions (of type {!exp}) are reminiscent of
    both Cil expressions ([Cil_types.exp]) and logic terms ([Cil_types.term]).

    All the record fields are present because they are currently strictly
    necessary for the compilation to be correct, in the sense that it yields
    Cil code that is equivalent modulo position to the code generated by the
    old direct-to-Cil compilation scheme. Some of these fields are bound to
    disappear as the first compilation stage takes over more of the second
    stage's tasks. *)

open Cil_types
open Analyses_types

type binop =
  | Plus | Minus | Mult | Div | Mod
  | Lt | Gt | Le | Ge | Eq | Ne

module Varinfo : sig
  type t = private
    | Fresh_varinfo of {id : int; ty : typ; name : string; origin : term}
    (** logic variable created in the generation stage *)
    | Logic_varinfo of varinfo
    (** reference to a pre-existing logic variable *)

  val fresh : origin:term -> string -> typ -> t
  val logic : varinfo -> t
  val pretty : Format.formatter -> t -> unit
end

type varinfo = Varinfo.t

type exp = {enode : exp_node; origin : term option}
(** [origin] is required to calculate casts. Note that [origin] is [None] when
    it stems from a predicate as predicates never require casts. *)

and exp_node =
  | True
  | False
  | Integer of Z.t
  | BinOp of binop_node
  | Lval of lval
  | SizeOf of typ

and binop_node = {ity : number_ty; binop : binop; op1 : exp; op2 : exp}

and lhost = Var of varinfo | Mem of exp
and lval = lhost * offset

and offset =
  | NoOffset
  | Field of fieldinfo * offset
  | Index of exp * offset

module Pretty : sig
  val pp_varinfo : Format.formatter -> varinfo -> unit
  val pp_binop : Format.formatter -> binop -> unit
  val pp_lhost : Format.formatter -> lhost -> unit
  val pp_lval : Format.formatter -> lval -> unit
  val pp_offset : Format.formatter -> offset -> unit
  val pp_exp : Format.formatter -> exp -> unit
  val pp_exp_node : Format.formatter -> exp_node -> unit
end
