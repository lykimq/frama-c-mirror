[kernel] Parsing temporary_object_issue_1037-1220.i (no preprocessing)
/* Generated by Frama-C */
struct X {
   int arr[2] ;
};
struct S {
   struct X x ;
};
struct X get_x(void)
{
  struct X __constr_expr_0 = {.arr = {42, 16}};
  return __constr_expr_0;
}

struct S get_s(void)
{
  struct S __constr_expr_1 = {.x = {.arr = {42, 16}}};
  return __constr_expr_1;
}

int init(void)
{
  int __retres;
  int *tmp_0;
  int const *tmp_3;
  {
    struct X tmp;
    tmp = get_x();
    tmp_0 = tmp.arr;
  }
  int *p = tmp_0;
  {
    struct X tmp_1;
    tmp_1 = get_x();
    p = tmp_1.arr;
  }
  {
    struct X tmp_2;
    tmp_2 = get_x();
    tmp_3 = (int const *)(tmp_2.arr);
  }
  int const *q = tmp_3;
  __retres = *p + *q;
  return __retres;
}

int g1(int *x)
{
  int __retres;
  __retres = *x;
  return __retres;
}

void g2(int *x)
{
  *x = 1;
  return;
}

int *calls(void)
{
  int tmp_0;
  int *tmp_3;
  {
    struct X tmp;
    tmp = get_x();
    tmp_0 = g1(tmp.arr);
  }
  int d = tmp_0;
  {
    struct X tmp_1;
    tmp_1 = get_x();
    g2(tmp_1.arr);
  }
  {
    struct X tmp_2;
    tmp_2 = get_x();
    tmp_3 = tmp_2.arr;
  }
  return tmp_3;
}

int *cond(void)
{
  int *__retres;
  int *p;
  char *tmp_1;
  int tmp_3;
  int tmp_7;
  {
    struct X tmp;
    tmp = get_x();
  }
  {
    struct X tmp_0;
    tmp_0 = get_x();
    tmp_1 = (char *)(tmp_0.arr);
  }
  if (tmp_1) {
    __retres = (int *)1;
    goto return_label;
  }
  {
    struct X tmp_2;
    tmp_2 = get_x();
    ;
    tmp_3 = tmp_2.arr[0];
  }
  if (tmp_3) {
    __retres = (int *)2;
    goto return_label;
  }
  {
    struct X tmp_4;
    tmp_4 = get_x();
    ;
    tmp_7 = tmp_4.arr[0];
  }
  if (tmp_7) {
    __retres = (int *)3;
    goto return_label;
  }
  else {
    int tmp_6;
    {
      struct X tmp_5;
      tmp_5 = get_x();
      p = tmp_5.arr;
      tmp_6 = *(p + 1);
    }
    if (tmp_6) {
      __retres = (int *)3;
      goto return_label;
    }
  }
  {
    int i = 0;
    while (1) {
      {
        struct X tmp_8;
        tmp_8 = get_x();
        if (! (tmp_8.arr)) break;
      }
      i ++;
    }
  }
  while (1) {
    {
      struct X tmp_9;
      tmp_9 = get_x();
      ;
      if (tmp_9.arr[0]) {
        struct X tmp_10;
        tmp_10 = get_x();
        ;
        if (! tmp_10.arr[1]) break;
      }
      else break;
    }
  }
  __retres = p;
  return_label: return __retres;
}

int paren_return(void)
{
  int __retres;
  int *tmp_2;
  int tmp_4;
  {
    struct X tmp;
    tmp = get_x();
  }
  {
    struct X tmp_0;
    tmp_0 = get_x();
  }
  {
    struct X tmp_1;
    tmp_1 = get_x();
    tmp_2 = tmp_1.arr;
  }
  if (tmp_2) {
    __retres = 1;
    goto return_label;
  }
  {
    struct X tmp_3;
    tmp_3 = get_x();
    tmp_4 = tmp_3.arr[0];
  }
  __retres = tmp_4;
  return_label: return __retres;
}

int nested(void)
{
  int __retres;
  int *tmp_0;
  int *tmp_2;
  int tmp_4;
  {
    struct S tmp;
    tmp = get_s();
    tmp_0 = tmp.x.arr;
  }
  int *p = tmp_0;
  {
    struct S tmp_1;
    tmp_1 = get_s();
    tmp_2 = tmp_1.x.arr;
  }
  if (tmp_2) {
    __retres = 1;
    goto return_label;
  }
  {
    struct S tmp_3;
    tmp_3 = get_s();
    tmp_4 = g1(tmp_3.x.arr);
  }
  int d = tmp_4;
  __retres = *p;
  return_label: return __retres;
}

int f(void)
{
  int __retres;
  __retres = 1;
  return __retres;
}

int comma(void)
{
  int __retres;
  int *p;
  int *q;
  int tmp_0;
  int tmp_3;
  int tmp_8;
  {
    struct X tmp;
    tmp = get_x();
    p = tmp.arr;
    tmp_0 = *p;
  }
  int x = tmp_0;
  int y = *p;
  {
    struct X tmp_1;
    struct X tmp_2;
    tmp_1 = get_x();
    p = tmp_1.arr;
    tmp_2 = get_x();
    q = tmp_2.arr;
    tmp_3 = *p + *q;
  }
  if (tmp_3) {
    __retres = *p + *q;
    goto return_label;
  }
  while (1) {
    {
      struct X tmp_4;
      tmp_4 = get_x();
      p = tmp_4.arr;
      if (! *p) break;
    }
    __retres = *p;
    goto return_label;
  }
  while (1) {
    {
      struct X tmp_5;
      tmp_5 = get_x();
      p = tmp_5.arr;
      if (*p) {
        int tmp_6;
        tmp_6 = f();
        if (! tmp_6) break;
      }
      else break;
    }
    __retres = *p;
    goto return_label;
  }
  {
    struct X tmp_7;
    tmp_7 = get_x();
    p = tmp_7.arr;
    if (*p) 
      if (*p) tmp_8 = 1; else tmp_8 = 0;
    else tmp_8 = 0;
  }
  int d = tmp_8;
  __retres = y;
  return_label: return __retres;
}


