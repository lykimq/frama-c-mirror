[kernel:acsl-extension] Registering acsl extension unfold
[kernel:acsl-extension] Registering acsl extension calls
[kernel:acsl-extension] Registering acsl extension instanceof
[kernel:acsl-extension] Registering acsl extension \eva::widen_hints
[kernel:acsl-extension] Registering acsl extension \eva::slevel
[kernel:acsl-extension] Registering acsl extension \eva::unroll
[kernel:acsl-extension] Registering acsl extension \eva::split
[kernel:acsl-extension] Registering acsl extension \eva::merge
[kernel:acsl-extension] Registering acsl extension \eva::dynamic_split
[kernel:acsl-extension] Registering acsl extension \eva::subdivide
[kernel:acsl-extension] Registering acsl extension \eva::eva_allocate
[kernel:acsl-extension] Registering acsl extension \eva::array_partition
[kernel:acsl-extension] Registering acsl extension \eva::eva_domain_scope
[kernel:acsl-extension] Registering acsl extension \eva::taints
[kernel:acsl-extension] Registering acsl extension \eva::taint
[test-import] Linking.
[kernel:acsl-extension] Registering module importer extension \myplugin1::foo
[kernel:acsl-extension] Registering module importer extension \myplugin1::bar
[kernel:acsl-extension] Registering module importer extension \myplugin2::foo
[kernel] Parsing import.i (no preprocessing)
[test-import:7] Loading A::B.
[test-import:15] Loading X.
[test-import:18] Loading X::Y.
/* Generated by Frama-C */
/*@ import \myplugin1::foo: A::B \as _ ;
 */
/*@ predicate check1(A::B::t x) = A::B::check(x, 0);
 */
/*@ predicate check2(A::B::t x) = A::B::check(x, 0);
 */
/*@ predicate check3(A::B::t x) = A::B::check(x, 0);
 */
/*@ predicate check4(A::B::t x) = A::B::check(x, 0);
 */
/*@ import \myplugin2::foo: X \as _ ;
 */
/*@ predicate check5(X::t x) = X::check(x, 0);
 */
/*@ import \myplugin1::bar: X::Y \as _ ;
 */
/*@ predicate check6(X::Y::t x) = X::Y::check(x, 0);
 */
/*@ predicate check7(X::Y::t x) = X::Y::check(x, 0);
 */

