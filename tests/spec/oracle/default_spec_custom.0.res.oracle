Registering an empty spec generation mode
Registering a new spec generation mode
[kernel] Parsing default_spec_custom.i (no preprocessing)
[kernel] Warning: Custom generation from mode emptymode not defined for exits, using frama-c mode instead
[kernel] Warning: Custom generation from mode emptymode not defined for assigns, using frama-c mode instead
[kernel] Warning: Custom generation from mode emptymode not defined for requires, using frama-c mode instead
[kernel] Warning: Custom generation from mode emptymode not defined for allocates, using frama-c mode instead
[kernel] Warning: Custom generation from mode emptymode not defined for terminates, using frama-c mode instead
[kernel:annot:missing-spec] default_spec_custom.i:9: Warning: 
  Neither code nor specification for function f1,
   generating default exits, assigns, allocates and terminates. See -generated-spec-* options for more info
[kernel] Warning: Custom status from mode emptymode not defined for exits
[kernel] Warning: Custom status from mode emptymode not defined for assigns
[kernel] Warning: Custom status from mode emptymode not defined for allocates
[kernel] Warning: Custom status from mode emptymode not defined for terminates
[kernel:annot:missing-spec] default_spec_custom.i:16: Warning: 
  Neither code nor specification for function f3,
   generating default exits, assigns, allocates and terminates. See -generated-spec-* options for more info
/* Generated by Frama-C */
/*@ terminates \true;
    exits \false;
    assigns \nothing;
    allocates \nothing; */
void f1(void);

/*@ terminates \true;
    exits \false;
    assigns \nothing;
    allocates \nothing; */
void f2(void)
{
  f1();
  return;
}

/*@ terminates \true;
    exits \false;
    assigns \result, *a;
    assigns \result \from *a;
    assigns *a \from *a;
    allocates \nothing;
 */
int f3(int *a);

/*@ terminates \true;
    exits \false;
    assigns \result, *b;
    assigns \result \from *b;
    assigns *b \from *b;
    allocates \nothing;
 */
int f4(int *b)
{
  int tmp;
  tmp = f3(b);
  return tmp;
}


