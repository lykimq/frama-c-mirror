[kernel] Parsing module.c (with preprocessing)
/* Generated by Frama-C */
/*@
module Foo {
  type t;
  
  logic t e;
  
  logic t op(t x, t y) ;
  
  logic t opN(t x, ℤ n) = n ≥ 0? op(x, opN(x, n - 1)): e;
  
  }
 */
/*@
module foo::bar {
  type a;
  
  logic a f(a x) ;
  
  logic Foo::t inv(Foo::t x) ;
  
  logic Foo::t opN(Foo::t x, ℤ n) =
    n ≥ 0? Foo::opN(x, n): opN(inv(x), -n);
  
  }
 */
/*@
module foo::jazz {
  type a;
  
  logic a f(a x) ;
  
  logic Foo::t inv(Foo::t x) ;
  
  logic Foo::t opN(Foo::t x, ℤ n) =
    n ≥ 0? opN(x, n): Foo::opN(inv(x), -n);
  
  }
 */
/*@
module priority {
  logic Foo::t inv_jazz(Foo::t x) = foo::jazz::inv(x);
  
  logic foo::jazz::a f_jazz(foo::jazz::a x) = foo::jazz::f(x);
  
  logic foo::bar::a f_bar(foo::bar::a y) = foo::bar::f(y);
  
  }
 */
/*@
module priority_aliased {
  logic Foo::t inv_jazz(Foo::t x) = foo::jazz::inv(x);
  
  logic foo::jazz::a f_jazz(foo::jazz::a x) = foo::jazz::f(x);
  
  logic foo::bar::a f_bar(foo::bar::a y) = foo::bar::f(y);
  
  }
 */
/*@
lemma AbsOp:
  ∀ Foo::t x, ℤ n; foo::bar::opN(x, \abs(n)) ≡ Foo::opN(x, \abs(n));
 */

