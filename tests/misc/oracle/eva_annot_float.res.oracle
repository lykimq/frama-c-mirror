[kernel] Parsing eva_annot_float.c (with preprocessing)
[eva] Option -eva-precision 2 detected, automatic configuration of the analysis:
  option -eva-min-loop-unroll set to 0 (default value).
  option -eva-auto-loop-unroll set to 32.
  option -eva-widening-delay set to 2.
  option -eva-partition-history set to 0 (default value).
  option -eva-slevel set to 20.
  option -eva-ilevel set to 16.
  option -eva-plevel set to 40.
  option -eva-subdivide-non-linear set to 40.
  option -eva-remove-redundant-alarms set to true (default value).
  option -eva-domains set to 'cvalue,equality,symbolic-locations'.
  option -eva-split-return set to '' (default value).
  option -eva-equality-through-calls set to 'none'.
  option -eva-octagon-through-calls set to false (default value).
[eva] Analyzing a complete application starting at main
[eva:initial-state] Values of globals at initialization
  world ∈ {0}
  a[0..19] ∈ {0}
[eva:loop-unroll:auto] eva_annot_float.c:22: Automatic loop unrolling.
[eva] using specification for function value
[eva:loop-unroll:auto] eva_annot_float.c:37: Automatic loop unrolling.
[eva] using specification for function value_or_nan
[eva:loop-unroll:auto] eva_annot_float.c:50: Automatic loop unrolling.
[eva] using specification for function nan
[eva] ====== VALUES COMPUTED ======
[eva:final-states] Values at end of function main3:
  world ∈ [--..--]
  a[0..19] ∈ NaN
  i ∈ {20}
[eva:final-states] Values at end of function main1:
  world ∈ [--..--]
  a[0..19] ∈ [-0. .. 100.]
  s ∈ [0. .. 2000.]
[eva:final-states] Values at end of function main2:
  world ∈ [--..--]
  a[0..19] ∈ [-0. .. 100.] ∪ {NaN}
  i ∈ {20}
[eva:final-states] Values at end of function main:
  world ∈ [--..--]
  a[0..19] ∈ NaN
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  4 functions analyzed (out of 4): 100% coverage.
  In these functions, 34 statements reached (out of 34): 100% coverage.
  ----------------------------------------------------------------------------
  No errors or warnings raised during the analysis.
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  No logical properties have been reached by the analysis.
  ----------------------------------------------------------------------------
[eva] Annotate main1
[eva] Annotate main2
[eva] Annotate main3
/* Generated by Frama-C */
/*@ ghost int world; */
double a[20];
/*@ ensures \is_finite(\result);
    ensures 0.0 ≤ \result ≤ 100.0;
    assigns \result, world;
    assigns \result \from world;
    assigns world \from world;
 */
double value(void);

double main1(void)
{
  double s = (double)0;
  {
    int i = 0;
    while (1) {
      /*@ assert Eva_export: 0 ≤ i ≤ 20; */
      if (! (i < 20)) break;
      {
        double v = value();
        /*@ assert Eva_export: 0 ≤ i ≤ 19; */
        /*@ assert
            Eva_export:
              -0.0000000000000000e+00d ≤ v ≤ 1.0000000000000000e+02d;
        */
        a[i] = v;
        /*@ assert
            Eva_export:
              0.0000000000000000e+00d ≤ s ≤ 1.9000000000000000e+03d;
        */
        /*@ assert
            Eva_export:
              -0.0000000000000000e+00d ≤ v ≤ 1.0000000000000000e+02d;
        */
        s += v;
      }
      /*@ assert Eva_export: 0 ≤ i ≤ 19; */
      i ++;
    }
  }
  /*@ assert
      Eva_export: 0.0000000000000000e+00d ≤ s ≤ 2.0000000000000000e+03d;
  */
  return s;
}

/*@ ensures
      (\is_finite(\result) ∧ 0.0 ≤ \result ≤ 100.0) ∨
      \is_NaN(\result);
    assigns \result, world;
    assigns \result \from world;
    assigns world \from world;
 */
double value_or_nan(void);

void main2(void)
{
  int i = 0;
  while (1) {
    /*@ assert Eva_export: 0 ≤ i ≤ 20; */
    if (! (i < 20)) break;
    {
      double v = value_or_nan();
      /*@ assert Eva_export: 0 ≤ i ≤ 19; */
      /*@ assert
          Eva_export:
            \is_NaN(v) ∨
            (-0.0000000000000000e+00d ≤ v ≤ 1.0000000000000000e+02d);
      */
      a[i] = v;
    }
    /*@ assert Eva_export: 0 ≤ i ≤ 19; */
    i ++;
  }
  return;
}

/*@ ensures \is_NaN(\result);
    assigns \result, world;
    assigns \result \from world;
    assigns world \from world;
 */
double nan(void);

void main3(void)
{
  int i = 0;
  while (1) {
    /*@ assert Eva_export: 0 ≤ i ≤ 20; */
    if (! (i < 20)) break;
    {
      double v = nan();
      /*@ assert Eva_export: 0 ≤ i ≤ 19; */
      /*@ assert Eva_export: \is_NaN(v); */
      a[i] = v;
    }
    /*@ assert Eva_export: 0 ≤ i ≤ 19; */
    i ++;
  }
  return;
}

void main(void)
{
  main1();
  main2();
  main3();
  return;
}


