/* run.config*
   FILTER: sed -e 's/[0-9.]\{1,\}\([%s]\)/?\1/g'
   STDOPT: +"-eva-show-perf"
   EXECNOW: BIN flamegraph.txt BIN flamegraph.err { PTESTS_TESTING=1 %{bin:frama-c} @PTEST_FILE@ -eva -eva-flamegraph flamegraph.txt && NOGUI=1 %{bin:frama-c-script} flamegraph flamegraph.txt; } 1> /dev/null 2> flamegraph.err
*/

/* This example is kept minimal to ensure the stability of the output
   of -eva-show-perf on the first run.
   The second run only tests that the flamegraph generated by -eva-flamegraph
   is valid. */

volatile int nondet;

typedef struct S {
  unsigned int length;
  unsigned int max;
} result;

int compute_next(unsigned int x) {
  return (x % 2 == 0) ? x / 2 : 3*x + 1;
}

result collatz(unsigned int n) {
  unsigned int i = 0;
  unsigned int v = n;
  unsigned int max = n;
  //@ loop unroll 100;
  for (i = 0; i < 100; i++) {
    if (v == 1) break;
    if (v > max) max = v;
    v = compute_next(v);
  }
  result r = { .length = i, .max = max };
  return r;
}

void print_collatz(unsigned int n) {
  result r = collatz(n); // 1 call to collatz
  r = collatz(n);        // 1 call cached by memexec
  Frama_C_show_each(n, r.length, r.max);
}

void main (void) {
  print_collatz(7); // 16 calls to [compute_next] for n = 7.
}
